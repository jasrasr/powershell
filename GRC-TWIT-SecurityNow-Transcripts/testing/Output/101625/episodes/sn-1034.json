{
  "Title": "Episode sn-1034",
  "Transcript": "C:\\Users\\jason.lamb\\OneDrive - middough\\Documents\\GitHub\\PowerShell\\GRC-TWIT-SecurityNow-Transcripts\\Downloads\\TXT-Transcriptions\\sn-1034.txt",
  "NotesPdf": null,
  "Tags": [
    "RSA",
    "Quantum Computing"
  ],
  "Preview": "GIBSON RESEARCH CORPORATION\t\thttps://www.GRC.com/\r\n\r\nSERIES:\t\tSecurity Now!\r\nEPISODE:\t#1034\r\nDATE:\t\tJuly 15, 2025\r\nTITLE:\t\tIntroduction to Zero-Knowledge Proofs\r\nHOSTS:\tSteve Gibson & Leo Laporte\r\nSOURCE:\thttps://media.grc.com/sn/sn-1034.mp3\r\nARCHIVE:\thttps://www.grc.com/securitynow.htm\r\n\r\nDESCRIPTION:  A glorious takedown of quantum factorization.  Notepad++ signs its own code-signing certificate.  Dennis Taylor has Bobiverse Book 6 on his lap.  Crypto/ATM machines flat out outlawed.  Signal v. WhatsApp:  Encryption in flight and at rest.  A close look at browser fingerprinting metrics.  Rewriting interpreters in memory-safe languages.  An introduction to zero-knowledge proofs.\r\n\r\nSHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  We've got a great show for you.  First of all, I am stunned, but it turns out all of this noise about how quantum computing is zipping right along and quantum factorization is BS.  Steve explains.  He's also going to talk about a new - the fin...",
  "FullContent": "GIBSON RESEARCH CORPORATION\t\thttps://www.GRC.com/\r\n\r\nSERIES:\t\tSecurity Now!\r\nEPISODE:\t#1034\r\nDATE:\t\tJuly 15, 2025\r\nTITLE:\t\tIntroduction to Zero-Knowledge Proofs\r\nHOSTS:\tSteve Gibson & Leo Laporte\r\nSOURCE:\thttps://media.grc.com/sn/sn-1034.mp3\r\nARCHIVE:\thttps://www.grc.com/securitynow.htm\r\n\r\nDESCRIPTION:  A glorious takedown of quantum factorization.  Notepad++ signs its own code-signing certificate.  Dennis Taylor has Bobiverse Book 6 on his lap.  Crypto/ATM machines flat out outlawed.  Signal v. WhatsApp:  Encryption in flight and at rest.  A close look at browser fingerprinting metrics.  Rewriting interpreters in memory-safe languages.  An introduction to zero-knowledge proofs.\r\n\r\nSHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  We've got a great show for you.  First of all, I am stunned, but it turns out all of this noise about how quantum computing is zipping right along and quantum factorization is BS.  Steve explains.  He's also going to talk about a new - the final, I think - volume of one of our favorite sci-fi series.  And then an introduction to zero-knowledge proofs.  This is going to be a fun one for your brain.  It's all coming up next on Security Now!.\r\n\r\nLEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 1034, recorded Tuesday, July 15th, 2025:  Introduction to Zero-Knowledge Proofs.  It's time for Security Now!, the show where you, dear, dear listener, get filled in on everything going wrong in technology.\r\n\r\nSTEVE GIBSON:  You wonder, what the hell is going on?\r\n\r\nLEO:  What could possibly go wrong, with this man right here, Mr. Steve Gibson, who is a font of knowledge.  Without him, we would be wandering in the wilderness.  Thank you for being here, Steve.\r\n\r\nSTEVE:  Happier than you are now, but still maybe a little hungrier.  \t\r\n\r\nLEO:  Yeah, you might not be so scared.\r\n\r\nSTEVE:  That's right.\r\n\r\nLEO:  But ignorance is not bliss when it comes to security.\r\n\r\nSTEVE:  Oh, are we going to have fun for the next couple hours, Leo.  We have the long-awaited, little did we know we needed it until it arrived, serious takedown of all quantum computing factorization nonsense.\r\n\r\nLEO:  Really.  Really.\r\n\r\nSTEVE:  Yes.  None of it is true.\r\n\r\nLEO:  Oh, no.\r\n\r\nSTEVE:  It has never worked.  It doesn't work.  It has never worked.  It's all - they've all used deliberately contrived tests.\r\n\r\nLEO:  How frustrating.\r\n\r\nSTEVE:  Peter Gutmann, who's a well-known cryptographer in New Zealand, just wrote a beautiful piece.  Thanks to one of our listeners who sent me the link.  So we're going to spend some time taking that apart.  We're also, thanks to another listener, going to look at Notepad++, which is a favorite Windows Notepad replacement utility for many of us.\r\n\r\nLEO:  Oh, yeah.\r\n\r\nSTEVE:  I'm converted.  And I converted thanks to our listeners, who said - I made some comment about Notepad, and they said, aren't you using Notepad++?  \r\n\r\nLEO:  Oh, man.\r\n\r\nSTEVE:  And everybody else piled on.\r\n\r\nLEO:  The Notepad++ people are absolute, you know, fanatics.\r\n\r\nSTEVE:  Well, and I've complained about it many times because the author, Don Ho, just can't leave it alone.  It's like, it's done, Don.  Just stop with, you know, because, as we know, every time it updates, there's an opportunity that it might be - you might be introducing more problems than solutions.\r\n\r\nLEO:  Right.\r\n\r\nSTEVE:  Anyway, there's a new problem with it that we're going to go into.  We've also got a screenshot of Bobiverse Book 6, laying on Dennis Taylor's lap.\r\n\r\nLEO:  Ohhh.\r\n\r\nSTEVE:  We've got a little news on Crypto/ATM machines, some Signal v. WhatsApp encryption questions resolved.  Also we just talked about browser fingerprinting.  Another listener reminded me essentially, because I knew of this before, the EFF's latest effort which obsoletes Panopticlick, which was their previous thing we talked about, which they haven't touched since 2017.  We're going to be able to take a deep dive into exactly what those metrics are and how valuable they are on a granular level.  And then, oh, are we going to have fun with Peggy and Victor.\r\n\r\nLEO:  Who are they?\r\n\r\nSTEVE:  Peggy and Victor.  Peggy is the prover.  Victor is the verifier.\r\n\r\nLEO:  Oh, this is like Bob and Carol and Ted?\r\n\r\nSTEVE:  Yes, and Alice, yes.\r\n\r\nLEO:  And Alice.\r\n\r\nSTEVE:  Eve, actually, the eavesdropper.  Those are the standard characters used when talking about zero-knowledge proofs. \r\n\r\nLEO:  Ah.\r\n\r\nSTEVE:  Zero-knowledge proofs is a surprisingly recent emergent technology because it turns out it's quite tricky.  The goal is to - and the reason we're talking about this is that Google just released to the open source community on GitHub their code for zero-knowledge proof age verification, the idea being you want to verify someone's age is 18 while revealing absolutely nothing about them, other than proving the assertion that they're 18.  So it turns out there's a whole field of math which is very tricky, which surrounds the idea of proving an assertion while revealing nothing.  I know it's counterintuitive, but I've got some examples using Peggy and Victor and a cast of additional characters.  We've got a couple competitors who've been buying something from a common supplier.\r\n\r\nLEO:  We're not going in a Chinese room or anything; are we?  This sounds a little bit like - all right.  Will there be math?\r\n\r\nSTEVE:  There will be math.  There will be magic caves.  There will be boxes locked in rooms, and the question of what happened to Wally.\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  So I think we're going to have a little fun.\r\n\r\nLEO:  This is going to be, would you say a propeller-head episode?\r\n\r\nSTEVE:  No.\r\n\r\nLEO:  No.\r\n\r\nSTEVE:  This is one actually where I think many of our listeners will get their kids in for the discussion of zero-knowledge proofs.\r\n\r\nLEO:  Oh, how fun.  All right.  Stay tuned.  And of course the Picture of the Week, which I have yet to glance at, so I will be amazed and surprised.\r\n\r\nSTEVE:  The mailing went out, and I already have the answer to the question, what the heck is going on here?  They're all, oh, yeah, we all do this.  This is what happens in our neck of the woods.  It's like, okay.\r\n\r\nLEO:  Now, you know what's not history, our Picture of the Week.  \"What's that about the weakest link?\"\r\n\r\nSTEVE:  Yeah.  So the caption I gave this was posing the question, \"What's that about the weakest link?\"  Because we've of course heard that phrase a lot.  So that's what this picture put me in mind of.  It's like, uh, okay.  So what we have here is one of our favorite fence pictures, or gate on a fence.\r\n\r\nLEO:  I understand why there's two locks.\r\n\r\nSTEVE:  Oh, it's covered with locks.  We've got three padlocks.\r\n\r\nLEO:  Oh, there's three, yeah.\r\n\r\nSTEVE:  Yeah.  And the back ones do absolutely nothing.  I mean, they're, like, okay.  And then the one in the middle of the chain is hooked to a carabiner.\r\n\r\nLEO:  Oh, that's not very secure.  That's not...\r\n\r\nSTEVE:  Everybody knows it's designed to be something you can open.  You just push the little side in, and then slip the padlock out, and the gate opens.  Now...\r\n\r\nLEO:  So this is not a locked gate, despite the three padlocks.\r\n\r\nSTEVE:  Well, correct.  It is a closed gate.  And I guess, you know, all of this contraption prevents the wind from blowing it open.  But that's about the limit of the security that's available here.  Now, so I posed this to our listeners.  I sent out, the mailing went out to - we're just shy at this point of 18,000 weekly subscribers to the Security Now! email list.\r\n\r\nLEO:  Nice, very nice.\r\n\r\nSTEVE:  And so many of them responded, saying, oh, yeah, this is common in these parts, around these parts.  The idea is that you may want the UPS driver to be able to roll up your driveway, but you don't want, you know, goats to get out.\r\n\r\nLEO:  The cows don't know how to use carabiners.\r\n\r\nSTEVE:  They're not, you know, well, there's no opposable thumb there, Leo.  You really need the opposable thumbs.\r\n\r\nLEO:  Opposable hooves.\r\n\r\nSTEVE:  That's right.  So, and if you were exiting your property, so that UPS and Amazon and, you know, Grubhub and so forth would no longer be invited, then you deploy these additional padlocks.\r\n\r\nLEO:  Oh.  They're there for your later use, subsequently.  Ah.\r\n\r\nSTEVE:  Exactly.  And you can put them in series.  You can put them in parallel.  You can just, you know...\r\n\r\nLEO:  Because the neighbors might have keys to one of them.\r\n\r\nSTEVE:  Or this may be a shared property.  And so you don't want to share keys, but you want to then put your locks in series so that anybody who opens - anyway.  It's an interesting contraption that's been built here, it turns out not at all foreign to many of our listeners.\r\n\r\nLEO:  We have many cattlemen listening, apparently.\r\n\r\nSTEVE:  We pull from a large variety of security enthusiasts.\r\n\r\nLEO:  Yes.  I love it.\r\n\r\nSTEVE:  Okay.  So, oh my god.  One of our listeners sent a link to a paper that was coauthored by Peter Gutmann.  And I'm not sure that our listener knew, based on the comment that accompanied the email, what to make of this paper, since I could understand that.  Its title is, its literal title, and this is a formally published, highly referenced, meaning lots of references, three pages of references at the end, paper, serious, titled \"Replication of Quantum Factorization Records with an 8-bit Home Computer, an Abacus, and a Dog.\"  That's the title of the paper.  I'm sure that that title would have hooked me with a \"Huh?!?\" if Peter's name wasn't immediately familiar to me.\r\n\r\nWikipedia opens its lengthy description of Peter's history by writing:  \"Peter Claus Gutmann is a computer scientist in the Department of Computer Science at the University of Auckland in Auckland, New Zealand.  He has a Ph.D. in computer science from the University of Auckland.  His Ph.D. thesis and a book based on the thesis were about a cryptographic security architecture.  He is interested in computer security issues\" - yeah, no kidding - \"including security architecture, security usability,\" and it says, parens, \"(or more usually the lack thereof),\" as in, you know, lack of usability, \"and hardware security.  He has discovered several flaws in publicly released cryptosystems and protocols.  He is the developer of the cryptlib open source software security library and contributed to PGP version 2.\"\r\n\r\nSo, you know, he's like a serious cryptographer.  He knows his way around computer security and cryptography.  And I felt compelled to venture into anything that he might write on the subject of replicating various quantum computer factorization records, as in, you know, having broken a record for quantum computer-based factoring.  So in this case he's breaking the records with an 8-bit home computer, which turned out to be a 6502-based Commodore VIC-20, you know, not even a pet, an abacus, and his dog named Scribble.  So before I go any further, I want to make sure that I do not forget to leave a link to his work in the show notes.  So it's there now for anyone who wants more details.  I'm going to skip a big chunk in the middle because all of the fun is at the front, and a little bit at the end.  But it's all there for anybody who wants more.\r\n\r\nNow, I hardly consider myself to be any kind of expert in the field of quantum computing.  I certainly am not.  And I have felt somewhat self-conscious through the years as, Leo, you and I have continually poked fun at what appear to be the extremely meager quantum computing number-factoring accomplishments that seem to nonetheless be celebrated by the popular press, as if it's like, whoa, you know, watch out, we just factored the number 21.  Oh.\r\n\r\nSo cryptography as we know it is over.  You know, it's like, okay, well, it's not clear to me that what we see is scalability or much in the way of evidence that we're in trouble.  You know, the fact that some super-cooled chip operating at subzero cryogenic temperatures is able to factor the 6-bit number 35 into its two products 5 and 7 to me has never clearly suggested that more bits will be forthcoming, nor when.  Okay.  So I felt somewhat heartened to learn at least that my intuition here, and my understanding of physics where it matters, may be intact.\r\n\r\nPeter and his co-author of this paper in this recently released March 2025 piece, are quite clearly similarly unimpressed.  But it even goes further than them being unimpressed.  Their paper's abstract is short and to the point.  It simply reads:  \"This paper presents implementations that match and, where possible, exceed current quantum factorization records using a VIC-20 8-bit home computer from 1981, an abacus, and a dog.  We hope that this work will inspire future efforts to match any further quantum factorization records should they arise.\"\r\n\r\nNow, Peter's having some fun with this, although his sincere intent appears to be to roundly debunk these \"accomplishments,\" I have in quotes, that have been achieved so far.  Peter understood that his use of the term \"factorise,\" which appears throughout the paper, and that's with an R-I-S-E, as opposed to in the U.S. we would say \"factorize,\" R-I-Z-E.  And even that, I've never liked that phrase \"factorize.\"  I mean, I get it, you're making a verb.  But isn't factor, you can factor something?  You factor an integer into its components.  Anyway, \"factorise\" is how he wants to say it.\r\n\r\nSo, but the first footnote in his paper tackles this head-on.  He wrote:  \"We use the UK form 'factorise' here in place of the U.S. variants 'factorize' or 'factor' in order to avoid the 40% tariff on the U.S. term.\"  So anyway, it occurred to me that he might qualify for a quantity discount in his use of the term, since it's used in nearly every sentence of this paper.\r\n\r\nSo I need to share this with everyone because it's actually important, what he has to say here, even though he's, I mean, basically he is just so disgusted with what he sees as what's going on that he decided to take this tack of his paper.  We all know that quantum computing presents what has been described as a clear and present danger to the world's current quantum-naive cryptography, and specifically to the threat that this prime factorisation problem, upon which much of today's security technology still critically depends, might be put at risk, might be at risk of being solved by sufficiently powerful quantum computers.  Peter and his coauthor are here to disabuse us of any such concern.\r\n\r\nSo they write:  \"In 1994, mathematician Peter Shor (S-H-O-R) proposed his quantum factorisation algorithm, now known as Shor's Algorithm.  In 2001, a group at IBM used it to factorise the number 15.  Eleven years later, this was extended to factorise the number 21.  Another seven years, later a factorisation of 35 was attempted but failed.\"\r\n\r\nLEO:  Okay.\r\n\r\nSTEVE:  Yeah.  We're pushing it, Leo.  That's six bits.  We can't get to six bits.\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  Five we were able to do.  Twenty-one, the number 21 fits in five bits.  But 35 requires six bits.  We couldn't get five and seven out of 35.  He says:  \"Since then no new records have been set, although a number of announcements of such feats have cropped up from time to time alongside the more publicly visible announcements of quantum supremacy every few months.\"  He says:  \"These announcements are accompanied by ongoing debates over whether a factorisation actually took place and, if so, what it was that was factorised, with the issue covered in more detail in this paper's section 3.\"\r\n\r\nNow, I should note that I'm not - I removed from this text all of the reference, you know, in square brackets a number which refers to the facts of some other paper written.  So, for example, where he says \"which is accompanied by ongoing debates over whether a factorisation actually took place.\"  There he will have a reference to another piece of research which is, you know, seriously questioning the announcement.  So this paper is heavily referenced to back up everything that Peter is saying.\r\n\r\nHe says:  \"Of particular note was the claim in 2024\" - so just last year - \"by researchers to have factorised an RSA-2048 number.\"  Then he says:  \"That's the D-Wave paper.\"  And remember that we talked about that last year when it happened.  D-Wave was supposed to have made some big great huge breakthrough.  And it was like, oh, no.  He says:  \"In this paper\" - the one he's writing today - \"we focus on the factorisations of 15, 21, and 35, as well as the claimed RSA-2048 factorisation.\"\r\n\r\nHe explains:  \"New technologies, when introduced, are typically given names that overstate their capabilities, usually by equating them with existing familiar systems or technological artifacts.  For example, the first computers in the 1940s and 1950s, often little more than glorified electric adding machines, were nevertheless described as 'electronic brains.'  More recently, large language models have been touted as 'artificial intelligence,' and complex physics experiments have been touted as 'quantum computers.'\r\n\r\n\"In order to avoid any confusion with actual computers like the VIC-20, with which they have nothing in common, we refer to them here\" - meaning quantum computers - \"as 'physics experiments.'  Similarly, we refer to an abacus as an 'abacus,' rather than as a digital computer, despite the fact that it relies on digital manipulation to effect its computations.  And finally, we refer to a dog as a dog because even the most strenuous mental gymnastics can't really make it sound like it's a computer.\"\r\n\r\nLEO:  Okay.  Now they're just being sarcastic.\r\n\r\nSTEVE:  He is.  But believe me, wait till you see where this goes, Leo.  I mean, he just drives a stake through the heart of quantum computing by the time we're done.\r\n\r\nHe says:  \"When stage magicians perform sleight-of-hand tricks, traditionally card tricks, they use specially constructed decks called 'force decks' with which they can force the participants in the trick to pick a card of the magician's choosing.  An example of such a force deck is a Svengali deck which when shown to the participant or the audience appears to contain a standard mix of cards, but which only contains a single repeated and therefore entirely predictable card.  Similarly, quantum factorisation is performed using sleight-of-hand numbers that have been selected to make them very easy to factorise using a physics experiment and, by extension, a VIC-20, an abacus, or a dog.\"\r\n\r\nLEO:  Ow.\r\n\r\nSTEVE:  Uh-huh.  \"A standard technique is to ensure that the factors differ by only a few bits, meaning least significant bits, that can then be found using a simple search-based approach that has nothing to do with factorisation.  For example, the lengthy RSA-2048 number\" - and in his paper he enumerates it full out, like every single digit is there, it takes about one and a half lines of decimal, with every three digits separated by a comma - \"is the product,\" he says, \"of two factors\" - which he then also lists out - \"that differ by only one or two [least significant] bits.\"  And indeed that's what we see.  We see two large numbers, each half the length of the 2048-bit number, and they are only a few decimal digits different from each other.\r\n\r\nHe says:  \"This makes it possible\" - and think about this, Leo, you'll get this instantly - \"to perform this 'factorisation,'\" he has in air quotes - \"through a simple integer square root calculation.\"  Because of course that's going to bring you to a spot in between the two.  Then you just search in both directions until you find the two.\r\n\r\nLEO:  Oh, my god.  Oh, my god.\r\n\r\nSTEVE:  Uh-huh.  He says:  \"Note that such a value would never be encountered in the real world since the RSA key generation process typically requires that\" - and then he has a little bit of math here - \"the absolute value of p-q > 100 or more bits\" in difference.  Meaning you would never have the case where the two prime factors differ by a small integer with their square root dead in between the two of them.  Yet that's what was done.  And everyone jumped around and celebrated.\r\n\r\nHe says:  \"As one analysis puts it, 'Instead of waiting for the hardware to improve by yet further orders of magnitude, researchers began inventing better and better tricks for factoring numbers by exploiting their hidden structure.'\"\r\n\r\nLEO:  Hidden structure?  You mean they're right next to each other?\r\n\r\nSTEVE:  Yeah.  That.\r\n\r\nLEO:  My god.\r\n\r\nSTEVE:  They're almost identical.  He says:  \"A second technique used in quantum factorisation is to use preprocessing on a computer to transform the value being factorised into an entirely different form or even a different problem to solve, which is then amenable to being solved via a physics experiment.  For example, the 2019 quantum factorisation of 1,099,551,473,989\" - so let's see, that would be a million, billion, so it's one trillion, 99 billion, 551 million, 473 thousand, 989.  He says:  \"The 2019 much-ballyhooed amazing breakthrough relied on processing with a computer to transform the problem into one that was solvable with a three-qubit circuit.\"\r\n\r\nWhich otherwise, I mean, you know, this would have required a huge number of qubits.  Which don't work.  We don't have that today.  So we're going to transform this into something and do some sleight-of-hand so we only need three qubits and say that we actually accomplished something.\r\n\r\nHe said:  \"Other quantum factorisations also rely on computers to reduce the problem to a form in which it can be 'solved' through a physics experiment.  Even the factorisations of 15 and 21 used the so-called compiled form of Shor's algorithm which uses prior knowledge of the answer to merely verify the known-in-advance factors, rather than performing any actual factorisation.\"\r\n\r\nLEO:  This is basically fraud.\r\n\r\nSTEVE:  It is fraud, yes.  And this is why he's so fed up with this and just decided, okay, I've got to just call a dog a dog.  He said:  \"In the case of 15 and 21 this reduced the number of qubits required from 8 and 10 to 2 in the compiled form.  The paper that discusses this result comments that 'it is not legitimate for a compiler to know the answer to the problem being solved.  To even call such a procedure \"compilation\" is an abuse of language.'\"  So, you know, other observers have been saying this, but it hasn't all been pulled together and given the attention until Peter finally said, okay, let's, you know, let's just really put this to rest.\r\n\r\nThey write:  \"The paper then presents the factorisation of a 768-bit, 231-digit number and a\" - get this - \"20,000-bit number, both of which can also be factorised using 2 qubits in the compiled form.  As the paper points out, 'our technique can factor all products of p and q such that p and q are unequal primes greater than two, runs in constant time, and requires only two coherent qubits.'\"  Meaning they've just demonstrated the cheat.\r\n\r\n\"Still other quantum factorisations go even further.\"  They write:  \"For example, one claimed factorisation involved working backwards from the known answer to design a physics experiment that produced the known-in-advance solution.  There is no equivalent computation for such sleight-of-hand operation, so we have no means to show an equivalent using a VIC-20 or an abacus.  The trick in all of these cases is to figure out how to construct a value such that it can then be transformed into a vastly simpler form in which it can be 'factorised' via a physics experiment.\"\r\n\r\nLEO:  I love it that he keeps calling these \"physics experiments.\"  Basically he's saying they're just designing this in such a way that simple physics can solve it.\r\n\r\nSTEVE:  Yes.\r\n\r\nLEO:  It's not a quantum computer, it's just a physics experiment.\r\n\r\nSTEVE:  No.  It's not doing any actual computation.\r\n\r\nLEO:  Amazing.\r\n\r\nSTEVE:  He said:  \"These types of factorisations have also been referred to as 'stunt factorisations.'  For example, the main effort in the 2012 factorisation of 143 into 11 and 13 consisted of finding a value with the special properties required that allowed it to be 'factorised' by a physics experiment.  This feat was then extended in 2014 to the value 56,153, which is also special, as we'll see; in 2018 to 4,088,459, another special value; and later that year to the impressive-looking\" - and then I've got the number here, you know, it's...\r\n\r\nLEO:  It's long.\r\n\r\nSTEVE:  It's a long, long, long, long number.\r\n\r\nLEO:  Yeah.  I'll show people if they want.\r\n\r\nSTEVE:  Okay.  There it is.  There in the middle:  383,123,885,216,472,214,589, blah blah blah blah blah.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  He says:  \"Many further types and techniques for stunt factorisations exist, far too many to catalogue here, with the practice typically being to manufacture a small value that's easily 'factorised' via a physics experiment, and then later figuring out how to stretch the value to add more and more digits, while still allowing it to be 'factorised' by the same physics experiment.\"  I know, Leo, it's all fraud.\r\n\r\nLEO:  It's backwards.  The whole thing's backwards.  We know the answer, now let's see if we can design a problem that will give you the same answer. \r\n\r\nSTEVE:  Exactly.  He says:  \"For example, the compiled Shor's algorithm can factorise any composite number p times q on a very small physics experiment, a 'factorisation' mechanism that has been given the tongue-in-cheek name Smolin-Smith-Vargo algorithm after the authors of the paper that pointed out the technique.\"  In other words, you're not actually doing anything.  So that's the Smolin-Smith-Vargo algorithm.  He says:  \"It should be noted here that all of these sleight-of-hand and stunt values are trivially factorised by Fermat's method on a Raspberry Pi or similar.\"  In other words, you don't need no stinking quantum computer or even subzero temperatures and cooled liquid nitrogen or anything.  Just a Raspberry Pi.\r\n\r\nHe said:  \"Similar to stage magic, the exercise when responding to a new quantum factorisation announcement is not only to marvel at the trick, but to try and figure out where the sleight-of-hand occurred.  One simple technique to catch the use of sleight-of-hand numbers is to view them in binary form.  If they consist almost entirely of zero bits, as did the 2019 factorisation of\" - and this is the number I mentioned before - \"1,099,551,473,989, which begins with 100000000000000, like a gazillion zeroes.  When expressed in binary, then it's a sleight-of-hand number.\"\r\n\r\nLEO:  It looks sophisticated in decimal.  In binary it's trivial.\r\n\r\nSTEVE:  It's ridiculous, exactly.  He says:  \"Similarly, numbers with repeating bit patterns 10101010 or similar are sleight-of-hand numbers.  Section 7 presents a technique for selecting non-sleight-of-hand numbers for future quantum factorisation work.\"  And that's the section I told you I wasn't going to dig into because everyone will get the idea here very shortly, I'm almost finished with this, where he actually says, okay, if you're going to impress anybody in the future, here's how you've got to choose your numbers.\r\n\r\nAnyway, he says:  \"A second technique is to check whether the value submitted to the physics experiment was the one being factorised or whether it has been first transformed on a computer into an entirely different form that's solvable with a physics experiment.  A standard trick here is to transform the factorisation into a combinatorial minimization problem which is readily solved using Grover's algorithm, completely impractical for factorisation, but perfectly suitable for publication credit.\"  Meaning we need to get our, you know, we need to publish something because we're spending a lot of money on all this liquid nitrogen, which is not getting us anywhere.\r\n\r\nHe said:  \"Many other sleight-of-hand tricks exist for creating apparent quantum factorisations.  One example is what we are calling the Callas Normal Form for Sleight-of-Hand Quantum Factorisation, or just 'Callas Normal Form' for short, after cryptographer Jon Callas, who first described it.  In the Callas Normal Form, the factors are integers p = 2n-1 and q = 2m+1, where n is less than m, and p and q are ideally prime, but don't have to be.  The binary representation of the product N is p times q.  That then starts with 'n' one bits followed by m - n zero bits and ends in another 'n' bits.\"  Anyway, so the point is it's contrived.\r\n\r\nHe says:  \"Needless to say, this is easily detected\" - right, because you've got all of these one bits, then a big block of zero bits, then an exactly identical size block of one bits again.  He says:  \"Needless to say, this is easily detected, even on a 6502, and easily factorised\" - and he says, parens, \"(no real-world RSA toolkit would ever generate such primes).\"  He says:  \"For example, a recent preprint\" - meaning getting ready to come out in the literature - \"uses this form to claim in its title success in factorising 4096-bit integers with Shor's algorithm 'under certain conditions,' where the 'conditions' for the 12 examples used turn out to be equivalent, all of them, to the Callas Normal Form.\"\r\n\r\nSo the entire paper was a cheat with 12 examples of supposedly 4096-bit factorization.  Which, if true, would destroy current RSA-style public key crypto.  Notice that it hasn't been destroyed.  In other words, everyone is cheating, and cheating badly.  And it's no wonder that Peter finally got fed up with this and decided to author this takedown.  No quantum computer that's known or has been published about has ever done anything actually useful, not even to factor the 6-bit number 35.\r\n\r\nLEO:  This is amazing.  How did we get fooled by this?\r\n\r\nSTEVE:  It's just...\r\n\r\nLEO:  Unbelievable.\r\n\r\nSTEVE:  ...people not really taking everyone down.\r\n\r\nLEO:  Well, yeah, it's math.  It's complicated.  This could take somebody like Peter to figure this all out.\r\n\r\nSTEVE:  And the press looks at the title and goes, oh, my god.\r\n\r\nLEO:  Oh, they did it.  I did that.\r\n\r\nSTEVE:  4096-bit numbers have been factored.\r\n\r\nLEO:  Yeah, I've been reporting it as if they're real.  I mean, they pulled the wool over our eyes.\r\n\r\nSTEVE:  Right.  He finishes, writing:  \"So far as we've been able to determine\" - this is the Ph.D. in crypto and security, the author of the cryptlib open source library.  He says:  \"So far as we've been able to determine, no quantum factorisation has ever factorised a value that wasn't either a carefully constructed sleight-of-hand number or for which most of the work wasn't done beforehand with a computer in order to transform the problem into a different one that could then be readily solved by a physics experiment.\"\r\n\r\nLEO:  I'm pissed.  I've been fooled.\r\n\r\nSTEVE:  Yes, we should all be.  \"We attempt to address this deficiency by providing criteria for evaluating quantum factorisation attempts in section 7.  The pervasive use of sleight-of-hand numbers and techniques and stunt factorisations throughout the field of quantum factorisation makes it difficult to select targets for our factorisation replication attempts.  Since it's possible, with a bit of thought, to construct arbitrary impressive-looking values for factorisation, an example being the 20,000-bit artificial value that was factorised with a 2-qubit physics experiment, we have to select targets that are at least within shouting distance of an actual application of something like Shor's algorithm for quantum factorisation.\r\n\r\n\"The three instances of this that we have been able to identify in the literature, even though they also use sleight-of-hand by using the compiled form of Shor's algorithm mentioned earlier, are the 2001 factorisation of 15, the 2012 factorisation of 21, and the attempted 2019 factorisation of 35.\"\r\n\r\nLEO:  They couldn't even do that.\r\n\r\nSTEVE:  Meaning, yes, that's where we are today in reality.\r\n\r\nLEO:  This is pathetic.  What a relief.\r\n\r\nSTEVE:  Yes.\r\n\r\nLEO:  By the way, you know we've interviewed this guy on Security Now!.\r\n\r\nSTEVE:  Yes, back in Episode, like 79 or something.\r\n\r\nLEO:  74, yeah.\r\n\r\nSTEVE:  Way in the beginning, yes.\r\n\r\nLEO:  Yeah.  He did a paper on Windows Vista Content Protection, which he said was the longest suicide note in history.  So this guy's been writing this kind of debunking blog post for a long time.\r\n\r\nSTEVE:  Yup.\r\n\r\nLEO:  And he's cool.  He's really cool.\r\n\r\nSTEVE:  Yeah, yeah.\r\n\r\nLEO:  I can't believe we've interviewed him.\r\n\r\nSTEVE:  Oh, and Leo, bring up a picture of him.  Just google his name.\r\n\r\nLEO:  Yeah, yeah.\r\n\r\nSTEVE:  He looks like Linus's best friend.\r\n\r\nLEO:  He's a Kiwi, yeah.\r\n\r\nSTEVE:  Yup.\r\n\r\nLEO:  It says \"Chicken game, don't look at this chicken,\" on his T-shirt.  I don't know.  I don't know what that's all about.  Oh, and then it says on the picture of the chicken on his T-shirt, \"Game over.\"  That is the nerdiest T-shirt I have ever seen.  How funny.  Oh, my.  Oh, my.\r\n\r\nSTEVE:  Yeah.  So anyway, so they proceed to demonstrate in the paper how a Commodore VIC-20 from 1981 can match any feat that any quantum computer has performed so far.  They use an abacus to do the same thing.  And when they get to their chosen dog, Scribble, they write:  \"As has been previously pointed out, the 2001 and 2012 quantum factorisation records may be easily matched\" - now, okay.  2001 was the factorisation of 15; right?  And so we factored 15 into 3 and 5.  2012 was the factorisation of 21, which we factor into 3 and 7.  So both of those you'll note have a common prime factor of 3.\r\n\r\nOkay.  So he says:  \"As has been previously pointed out, the 2001 and 2012 quantum factorisation records may be easily matched by a dog trained to bark three times.\"\r\n\r\nLEO:  And here, ladies and gentlemen, I give you the dog.\r\n\r\nSTEVE:  The dog Scribble.  \"We verified this by taking a recently calibrated reference dog, Scribble, depicted here, and having him bark three times, thus simultaneously factorising both 15 and 21.  This process,\" he writes, \"was not as simple as it first appeared because Scribble is very well behaved and almost never barks.  Having him perform the quantum factorisation required having his owner play with him with a ball in order to encourage him to bark.  It was a special performance just for this publication, because he understands the importance of evidence-based science.\"\r\n\r\nLEO:  Oh, my goodness.\r\n\r\nSTEVE:  This process was then repeated to have him bark five times, factorising the number 35, and thereby exceeding the capability of the quantum factorisation physics experiments mentioned earlier.\r\n\r\nLEO:  Oh, snarky.\r\n\r\nSTEVE:  He says unfortunately that this process fails for the RSA-2048 values since the size of the factors exceeds even the most enthusiastic dog's barking ability.  However, there is another process that allows us to factorise even these huge numbers with a dog.  Recall from section 4 that the prime factors q and p were either 2 or 6 apart.  This led to an analysis where it was discovered that p = x - d and q = x + d, where x is the integer in the middle between p and q, and d is either 1 or 3.  It can thus be argued that d is the real secret.\r\n\r\nLEO:  Is it 1?  Is it 3?\r\n\r\nSTEVE:  So teaching a dog to bark three times already gives us all the actual factorisations with Shor's algorithm, plus 50% of the moduli in the D-Wave paper, in the same way that factorising 143 also factorises 56,153, 4,088,459, and that other really hideously long number.\r\n\r\nLEO:  The number referred to earlier, which is very, very big.\r\n\r\nSTEVE:  Yup.\r\n\r\nLEO:  It's the same.  What a trick.\r\n\r\nSTEVE:  So having set up the situation quite well, the paper then gets down to its serious purpose of establishing some guidelines and standards for choosing the numbers that will be factored by wannabe quantum computing experiments.  And this was really the entire point of the paper, though without the lead-up preamble the serious need for the guidelines might not be fully appreciated.  And they finish by writing:  \"In this paper we showed how to replicate current quantum factorisation records using first a VIC-20 8-bit home computer from 1981, then an abacus, and finally a dog.  In terms of comparative demonstrated factorisation power, we rank a VIC-20 above an abacus, an abacus above a dog, and a dog above a quantum factorisation physics experiment.  Finally, we provide standard evaluation criteria for future claimed quantum factorisations.\"\r\n\r\nAnd we can all take a deep, slow breath and not worry that the factorising, factorisation, factorising problem is going to be solved anytime soon.  It's all just been a scam.\r\n\r\nLEO:  And by the way, okay, I understand Chinese researchers, probably it's a scam.  But IBM?  Google?  I mean, why?  Is it because they're trying to get funding?\r\n\r\nSTEVE:  I think they're probably trying to say, oh, we're getting closer.  We're making progress.\r\n\r\nLEO:  No.\r\n\r\nSTEVE:  You know, it could happen any day.\r\n\r\nLEO:  It's smoke and mirrors.\r\n\r\nSTEVE:  Yes.  That's why you and I have been laughing about it, like, for the last 10 years when we say, oh, they factored 15.  Well, turns out they didn't actually even do that.\r\n\r\nLEO:  They didn't even do that.  They rank lower than a dog.  Wow.  Um, I am just kind of blown away.  And this guy's credible.  I mean, I think he is.\r\n\r\nSTEVE:  Yes.  He's the real deal, yes.\r\n\r\nLEO:  He's a cryptographer.\r\n\r\nSTEVE:  Yeah.  And, I mean, I've spent enough time on this.  We've got other stuff to talk about today.  But that section 7, the link is in the show notes, he goes through a detailed explanation of, if you actually want to publish a paper, factor a number that meets the following criteria.  And he lays it out.\r\n\r\nLEO:  Just use a Svengali number.\r\n\r\nSTEVE:  Exactly.  It's not all - it's not one followed by all zeroes, or some ridiculous pattern, which, you know...\r\n\r\nLEO:  They're only three apart.\r\n\r\nSTEVE:  Exactly.\r\n\r\nLEO:  And so you take the square root and, you know, you're halfway there.\r\n\r\nSTEVE:  And that gets you close, and then you just go in each direction.\r\n\r\nLEO:  This is depressing.  It's confirmation that we live in a very bad timeline, where people are just corrupt.  They're just corrupt.  All right.  Want to take a break before we go on?  That was a lot.  I still am absorbing all that.  Wow.  Wow.  I'm miffed.\r\n\r\nSTEVE:  Yup. \r\n\r\nLEO:  Well, I've been kind of uncritically repeating those headlines.  Not anymore.\r\n\r\nSTEVE:  Why wouldn't everybody?  You know...\r\n\r\nLEO:  Well, yeah, I mean, I don't know any better.  All right.  Back we go.  I think a little listener feedback is in order here.\r\n\r\nSTEVE:  We've got Benjamin Lindner.  L-I-N-D-N-E-R.\r\n\r\nLEO:  He knows his name.  \r\n\r\nSTEVE:  Lindner.  Thank you.\r\n\r\nLEO:  You know, we all know Ben Lindner, yeah.\r\n\r\nSTEVE:  So he wrote:  \"Hi Steve, Long-time listener and Club TWiT member.\"\r\n\r\nLEO:  Yay.\r\n\r\nSTEVE:  Thank you, Benjamin.\r\n\r\nLEO:  Thank you.\r\n\r\nSTEVE:  \"Yours is the only podcast I listen to with my full attention, and I will pause if I can't pay attention at the moment.  The only podcast I make sure to hear and understand everything.  I'll often re-listen several times to things I didn't fully understand.  In short, high praise.\"\r\n\r\nHe said:  \"I came across something this week that I thought didn't seem right.  But I'm not sure.  I am, however, sure that the above is true of many people.\"  Thank you.  He said:  \"Notepad++ updated (again) to 8.8.3. (we know how you love those frequent updates).\"  Yeah.  He said:  \"In the information about the update, the developer says that this version ships self-signed, with a CA certificate, and gives instructions for installing it, as a root CA, in users' machines.  He explains that he's been having difficulties getting a code-signing cert, so the unsigned binaries triggered AV false positives.\"  Oh, boy, don't I know about that.\r\n\r\nHe said:  \"This seems to me much too dangerous.\"  Oh, and there is a link to that posting at the Notepad++ dot org site.  He said:  \"This seems to me much too dangerous.  I myself am not having the problem described, but I was just struck by the danger of such a thing.  Even if Notepad++ is okay, and the developer has no ill intention with a very powerful cert, seems to me like a terrible suggestion.  It's just too powerful, and thus dangerous.  There's also the bad habit forming of installing certs willy-nilly to solve problems.  I can see a developer being frustrated and coming to this solution.  But it's irresponsible to put this out to the general public.  Am I understanding this correctly?  Also a SpinRite owner.  V7 when?\"\r\n\r\nOkay.  So I was apprised of this issue with Notepad++ first some time ago by another of our listeners who wrote to ask whether I had any ideas for solving this problem for our Notepad++ author.  Before I go any further, let's see what Notepad++'s author wrote.  He announced this Notepad++ v8.8.3 release under the title:  \"Notepad++ v8.8.3 release:  Self-signed certificate.\"\r\n\r\nHe wrote:  \"There were, and still are\" - this is Don Ho writing.  \"There were and still are many false-positives reported in the previous version 8.8.2, by the antivirus software due to the absence of Windows code-signing certificate.  To prevent this issue from recurring in future releases, from this version on, the Notepad++ release is signed with a certificate issued by a self-signed Certificate Authority.  The root certificate is published on the Notepad++ website, GitHub repository, and Notepad++ User Manual, allowing antivirus vendors, IT teams, and users to verify the authenticity of each release.\"\r\n\r\nThen he says:  \"How to install the root certificate:  Double-click the certificate.  It may tell you it's invalid.  Ignore that and click 'Install Certificate.'  The Certificate Import Wizard, select 'Local Machine,' then click 'Next.'  If prompted by UAC, depending upon admin privileges, click 'Yes.'  Choose 'Place all certificates in the following store,' then browse and select 'Trusted Root Certification Authorities.'\"\r\n\r\nLEO:  No.\r\n\r\nSTEVE:  \"Click 'Next.'  \tOn the final page of the wizard, click 'Finish' to complete the installation.\"  He says:  \"For detailed instructions, see Notepad++ User Manual.\"  I know.  And he finishes:  \"We're still trying to obtain a certificate issued by conventional Certificate Authorities, for a better user experience.  But let's be honest,\" he writes.  \"It's probably not happening.  Notepad++ isn't a business.  It's certainly not an enterprise.  And apparently that makes a popular open-source project invisible to their gatekeeping standards.\"\r\n\r\nLEO:  Well, that's reasonable, if they won't give him a certificate.\r\n\r\nSTEVE:  It is.  I mean, this is a problem.  He says:  \"If the gatekeepers won't issue a certificate under the name we deserve, so be it.  At least it spares us from wasting time and energy on a frustrating process that demands we beg for a new certificate every three years.  The Notepad++ Root Certificate may not carry their approval, but it leads us to freedom.\"\r\n\r\nOkay.  So what we have here is another effectively - like what we have here on a broader scale is another effectively intractable problem caused by the ever-escalating war between malware and goodware.  Just like this Notepad++ guy, I, as we all know, write goodware.  And if I fail to sign any of that goodware by GRC, the AV industry, Microsoft, and Windows Defender all collectively freak out.  They sometimes freak out even IF I sign my software...\r\n\r\nLEO:  Yeah, I remember that happened; right?  Yeah.\r\n\r\nSTEVE:  Yeah, with a certificate that has been continually signing only good software for years, and has never once been found to sign any malware.  That's just where the bar has been set.  That bar has been pushed as high as it can go because it's safer for the end user if their protectors to say \"no\" to goodware than \"yes\" to malware.\r\n\r\nAnd this has been an ongoing drama that, as a software developer, I've been sharing with our audience here as it's been unfolding.  For a while, Microsoft was giving extra Brownie points to any code that was signed with an extra-expensive EV code-signing certificate, you know, Extended Validation.  So that's what I was using.  I would pay the price, get an Extended Validation certificate because it was the best you could get.  And EV certs could only be received, stored in, and used inside of an HSM - a Hardware Security Module.\r\n\r\nThis effectively raised the bar even higher and much more robustly prevented their theft and abuse because you can never get the certificate out of an HSM.  It only goes in.  There's no way to extract it.  Because, you know, that's the real danger, right, that bad guys will get their hands on a trusted and trustworthy code-signing certificate and use it to sign some of their nasty malware that will then stand a much greater chance of sliding right past AV detections, specifically because it's been signed by a signer whose trust has been earned.\r\n\r\nNow, for reasons that remain a mystery, Microsoft then later decided to deprecate that special treatment of EV certificates.  Maybe it just created too much of a schism in the industry?  I don't know what happened.  I talked to the guy at DigiCert, my contact there, Jeremy, who knows, I mean, who's on the CA/B Forum and participates.  And he said nobody knows why Microsoft decided, they just announced, okay, EV code signing is no longer going to be special.  So of course naturally that wasn't until after I'd jumped...\r\n\r\nLEO:  What a mess.\r\n\r\nSTEVE:  I know.  I had jumped through all those numerous hoops to allow GRC's server to individually sign every copy of SpinRite 6.1 on-the-fly with a Hardware Security Module, you know, as it's being downloaded by its user.  Now that's in place - it's been working surprisingly well after I finally got it working - I expect that I'll leave it there, even though I'm not sure, since maintenance of certificates in HSMs is annoying, too.  But it's safer to have it in an HSM, so I imagine I will.  But in any event, we're now told that the EV-ness of code-signing certs is irrelevant.  And I'm fine with that since proving my identity for an EV qualification was bizarre.  Remember what I was required to do?\r\n\r\nLEO:  Oh, yeah.  Oh, yeah.\r\n\r\nSTEVE:  I had a one-way video call, with me on the camera, holding up my government-issued ID next to my face, and then having to move, being instructed to move my left hand around among my face and my driver's license, while the guy from DigiCert was looking at me from wherever he was.  I mean, talk about raising the bar.  So, wow.  But whether my code-signing certificate is EV or not, what matters most is that the private key that was used to sign the certificate was itself signed by DigiCert's private key, and that that private key's matching public key is already present in everyone's Windows PC certificate store as it is.  Everybody has DigiCert's key, and Microsoft's, and a bunch of other people's.\r\n\r\nDigiCert's public signing key is also present in all of the AV testing systems; right?  All of the things that are out there checking certificates have that same set of certificate authority master public keys.  Which brings us to the problem that Notepad++'s author, Don Ho, now has.  Non-EV, generic Organization Validation code-signing certificates, the kind that he's being asked to get, cost between $250 and $400 per year.  This is not a cheap game.  And Notepad++ is Windows freeware.  Who's going to pay that cost?  GRC can afford that, since I've been fortunate enough to develop an amazing following of terrific customers.  So all of GRC's freeware gets the benefit of being signed by the same certificate that its paid-for commercial software, which is, as we know, still at this time only SpinRite is used for signing.\r\n\r\nBut Don is offering Notepad++ to the world for free, and he's understandably irked by the idea of needing to pay for the privilege of not being flagged by the world's over-hyperactive AV scanning and being flagged as malicious.  Which of course freaks out every Windows user, it's like, what?  You know, it never used to be malicious.  Now it's suddenly malicious.  What?  Notepad++ is not, and has never been, malicious.  But code is code, and today's AV takes a \"better safe than sorry\" approach.  Code that is not signed is automatically looked down upon with extreme suspicion.  I mean, it's basically just flagged because why not?  Why would any reputable code not have a code-signing certificate?\r\n\r\nSometimes I'll forget to sign a test of mine, drop it on VirusTotal, and it just goes crazy.  And I think, first I think, what happened?  And then I realize, ooh, I forgot to sign it.  I sign it, drop the same code on VirusTotal, I get 0 out of 72 detections.  Everything is fine.  Same code, just the presence of that signature is what makes the difference.  But it's because the signature is from DigiCert.  And that's the key.  What Don is attempting to do is to be his own certificate authority, and it won't work.  He created a pair of certificates, one private and the other public.  And the public key certificate is self-signed.  It's an anchor, just like DigiCert's public certificate is self-signed.\r\n\r\nAll of the certificates in the root store sign themselves.  That's because they're anchors.  So they're not - we're not relying on them being signed by somebody else who we trust.  They are who we trust.  So those certificates sign themselves, saying, well, I trust myself, and you're going to trust us, too.  And so then we trust everything they sign.\r\n\r\nSo but what Don is doing is he's creating his own trust anchor.  The difference is that none of our PCs, none of the AV tools, contain Don Ho's CA root certificate until and unless we deliberately install it into our machines.\r\n\r\nLEO:  Hmm.\r\n\r\nSTEVE:  So our listener asked, in his note, he said:  \"Even if Notepad++ is okay, and the developer has no ill intention with a very powerful cert, it seems to me like a terrible suggestion.  It's just too powerful, and thus dangerous.  There's also the bad habit forming of installing certs willy-nilly to solve problems.\"\r\n\r\nOkay.  Now, at first we might think that the biggest danger is that Don might not be good at keeping his own secrets, and that someone might break into his development environment to steal the private certificate he uses to sign his freeware.  I don't think that's a big concern because the only place anything signed by that stolen, if it were stolen, by that certificate would be trusted, would be within the microcosm of Don's own Notepad++ users into whose PCs he had somehow convinced to install his proprietary certificate.  That's not going to be of much use to someone who wishes to sneak their malware past the world's AV.\r\n\r\nAnd I'm not at all convinced that Don's solution will help at all with the world's AV tools.  They don't know that they can trust code signed by Don's own certificate.  And why would they?  We know that Don's a good guy, that he would never deliberately produce malware.  But nothing prevents any malware author from doing the same thing Don did, creating their own certificate pair and signing their code with an untrusted certificate that has no pedigree. The fact that some of Don's users may elect to place his certificate into their own machine's CA root store certainly won't sway the opinion of these hyperactive, overactive AV tools.  And it's unclear to me that it would sway the opinion of Windows Defender.  I don't think Microsoft is going to care.\r\n\r\nSo it does not seem to me that Don creating his own certificate, first of all, is a big problem from the standpoint of it representing any great risk of abuse.  But it's also not clear to me that it will achieve what Don hopes, since AV tools are not going to be checking, you know, against the user's root store.  They're going to be looking at their own trusted stores and trusting that.  You know, Don's site says this will \"allow antivirus vendors, IT teams, and users to verify the authenticity of each release.\"  Who's going to do that?  No AV vendor is going to get Don's certificate just so copies of Notepad++ could be checked.  You know, sorry, but it's not that big a deal.  But I suppose hope springs eternal.\r\n\r\nWhat I do very much worry about is what our listener, Benjamin, referred to as \"the bad habit forming of installing certs to solve problems.\"  With that I really agree wholeheartedly.  Just about the last thing I want is for my own machines' CA root stores to be filling up with random certificates from the authors of freeware that I wish to use.  On the one hand, over time that would create a truly unmanageable mess.  And as I noted, it's unclear on the other hand that it would accomplish anything anyway, since any malware author is just as able to create their own root and do what Don did.  So there's no way any antivirus system or Microsoft's own Defender endpoint protection is going to care.\r\n\r\nSo I'm 100% sympathetic with Don's plight.  And as I noted, this is a real mess without any clear solution.  We have a problem in our industry because the only way we have found to give any pedigree to software is to prove authorship.  And proving authorship is - I don't see how you do that for free.  This is a different problem than Let's Encrypt solved with free domain validation certs.  Right?  You're not - Let's Encrypt is not saying anything about the reputation of the site that you're visiting.  They're only saying you're visiting this domain name.  So they're just giving you privacy protection and authenticating that you're connecting to the domain name you think you are.  But they're not saying anything about its reputation.  Code-signing certificates are trying to make an assertion about the reputation of the entity that signed the code.  That's where we are.\r\n\r\nLEO:  Ah.  I see.\r\n\r\nSTEVE:  And so the open source community and the freeware community is in trouble.\r\n\r\nLEO:  Yeah, this is really an anti-freeware move on the part of these guys.  You know, now I understand why it's an issue.  This isn't an issue, of course, on Linux because you don't have a big company like Microsoft scanning this stuff and saying, oh, this is suspicious.  You do have some AV, but not anything near the same AV industry.  On Linux, though, people don't use certificates.  They just use hashes.  And all that does, it doesn't prove the reputation.  All it does is say, well, this came from...\r\n\r\nSTEVE:  It's not modified.\r\n\r\nLEO:  Yeah.  It's not modified.  Came from the original source.  And this person, it's like a PGP key.  This person certifies this is him, and he made it.  But it's up to you to do the reputation part.  That works fine, though, by the way, on Linux, on open source operating systems, because you don't have this big company saying, well, you don't want to run that; do you?\r\n\r\nSTEVE:  No.  And, I mean, it's a problem.  You download something...\r\n\r\nLEO:  It is a problem for libraries, yeah.\r\n\r\nSTEVE:  And, I mean, but when my certificate was new, Windows Defender was deleting the...\r\n\r\nLEO:  Right.\r\n\r\nSTEVE:  Deleting it from people's computer, quarantining it and deleting it.  They couldn't get it.  It was just - it would vaporize the moment it arrived.\r\n\r\nLEO:  Oh, that's horrible.\r\n\r\nSTEVE:  And so, and I'm talking about working with, you know, sophisticated users who were testing pre-release code.  And the only way I as a developer, Leo, I have to completely turn off Windows Defender from my assem tree or the moment I assemble code and create an EXE, it's gone.\r\n\r\nLEO:  That's hysterical.\r\n\r\nSTEVE:  It's never been seen.  Windows Defender just erases it.  And so I have to completely...\r\n\r\nLEO:  I think that's a little draconian.  Don't you?\r\n\r\nSTEVE:  It's what everyone - all developers have to shut off Defender for their development tree because it just eliminates their EXEs.  The moment they appear out of the linker, they vaporize.  It shoots them with a space laser.\r\n\r\nLEO:  Wow.  That's crazy.\r\n\r\nSTEVE:  It's today's world.\r\n\r\nLEO:  Well, it's today's commercial world, I guess.  Do you think we're less safe on Linux because, I mean...\r\n\r\nSTEVE:  No, because Linux is not a big target.\r\n\r\nLEO:  Right.\r\n\r\nSTEVE:  Windows is the target.\r\n\r\nLEO:  It's the target.\r\n\r\nSTEVE:  Windows is what malware guys want to get into.\r\n\r\nLEO:  Yeah.  There's got to be a better way.  This is ridiculous.\r\n\r\nSTEVE:  And that's why I wanted to point out the difference between certs and Let's Encrypt, is Let's Encrypt can give you free certs because of all...\r\n\r\nLEO:  No reputation.\r\n\r\nSTEVE:  Right.  It's just saying you are at this domain.\r\n\r\nLEO:  So you'll still get flagged by Defender and all the other AV, yeah.  I wonder if, because Defender flags it, the other AV guys said, oh, well, we'd better flag it, too.\r\n\r\nSTEVE:  I think they all work independently.  You know, they're all trying to be better than Microsoft.  And, you know, early on there were some arguments that, well, Defender wasn't that good, but it was free, you know, Malwarebytes and MacAfee and, I mean, there's a lot of legacy.\r\n\r\nLEO:  Apple does not have this problem.  I mean, Apple does, for stuff sold in the store, have a notarization process and an authentication process.  So if you buy it in the store, it's assumed it's all fine because Apple's protecting you. \r\n\r\nSTEVE:  Right.\r\n\r\nLEO:  But you can download arbitrary stuff, and Apple will say, whoa.  And you can say, no, no.\r\n\r\nSTEVE:  Well, and this is like, kind of like the whole sideloading problem; right?\r\n\r\nLEO:  Right.\r\n\r\nSTEVE:  I mean, the presumption is we're moving toward this store model because Microsoft will be doing the vetting.  And if it comes to the Microsoft store, it's from a developer who's established a reputation.  And so it is, it is a pushback against, you know, against the world we have had before, where apps, you just get them from wherever you want to.\r\n\r\nLEO:  I don't like it, but I guess it's a necessary evil for security.\r\n\r\nSTEVE:  Yeah.\r\n\r\nLEO:  It's why I use Linux, though.  I don't have any Windows machines.\r\n\r\nSTEVE:  Okay.  Break time.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  And then we're going to do a little more feedback.\r\n\r\nLEO:  Well, I did have a question I wanted to ask you.  Let's Encrypt has announced that they are going to offer certificates for IP addresses.  What the hell does that mean?\r\n\r\nSTEVE:  You can put an IP address into your browser.  You can go, you know, https://1.1.1.1.\r\n\r\nLEO:  Right, Cloudflare, yeah.\r\n\r\nSTEVE:  Will take you to Cloudflare.  But the certificate name has to have, the certificate has to have 1.1.1.1 in the cert.  Otherwise you can't get a TLS connection.  So the name in the URL has to appear in the certificate.\r\n\r\nLEO:  And there aren't very many URLs that you would use the dotted quad as the URL.\r\n\r\nSTEVE:  And if you go to Cloudflare.com, look at the cert.  You'll see their IP addresses are in the certificate name, in the SAN.\r\n\r\nLEO:  Probably true for Quad9, as well.  That's interesting.\r\n\r\nSTEVE:  Yup.  Yup.\r\n\r\nLEO:  Oh, good, thank you.  It's not something you or I would do.  We don't - unless we had some magic IP address, like 1.1.1.1.\r\n\r\nSTEVE:  Right, unless it's a really cool address.  You know, 1.2.3.4.  It's like, ooh.\r\n\r\nLEO:  That's be good.  That'd be good.\r\n\r\nSTEVE:  That's your - yeah.\r\n\r\nLEO:  I'd get a cert for that in a heartbeat.  And now, the good news.\r\n\r\nSTEVE:  So Kevin Zollinger, a listener of ours, shared an image and wrote:  \"Morning!  I suspect I am #3231 to pass this along, but it looks like Book 6 is on its way.\"  He said:  \"I grabbed the image off Reddit.  Sometime next year we'll be back hearing about the many adventures of the Bobs.\"  And I don't recognize the app this screenshot was taken from.  Is that Instagram, Leo?\r\n\r\nLEO:  Yeah, I think so.  I'm looking at the likes, the retweets.  Yeah, it looks like Instagram, yeah.\r\n\r\nSTEVE:  Anyway, what we see appears to be posted by Dennis E. Taylor.  It was 49 minutes ago from when the screenshot was taken.  It's a photo of a manuscript titled \"Revelations,\" and then underneath it, it says \"(Bobiverse Book 6) by Dennis E. Taylor.\"\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  And it's sitting on, presumably, his lap.  We see a pair of legs in shorts underneath the draft manuscript, as well.  And down in that fine print it says \"Version 2025-7-12.1,\" which would place it as last week.  So looks like, you know, printed out on paper manuscript.\r\n\r\nLEO:  That's the real deal.  And spiral bound, no less.  Wow.  That's cool.\r\n\r\nSTEVE:  Christopher Lawson says:  \"Mr. Gibson.  While listening to podcast 1033 you were asking about the difference in WhatsApp and other messaging apps with regard to WhatsApp not using encryption for message storage.  Messaging applications like Signal encrypts the SQLite database on the mobile device in addition to the built-in device storage encryption and stores the encryption key on the keychain.  This prevents backups to iTunes and iCloud from containing the unencrypted messages along with any spyware/mercenary-ware from exfiltrating unencrypted messages from the shared application's container locations.\r\n\r\n\"WhatsApp has chosen to keep the messages decrypted so that they can be recovered from backup or transferred to a new phone (or even phone brand).  Signal has chosen privacy over portability and usability in many areas, while WhatsApp is focused on usability and portability over the additional layers of security controls.  Keep up the great work with teaching/engaging critical thinking skills with your podcasts.  Signed, Chris.\"\r\n\r\nSo Chris, thank you.  Anyway, so that sort of explains a little more clearly what it was that we saw in the news last week that had WhatsApp in trouble.  The reason WhatsApp was presumably, the congressional staffers were being told that WhatsApp was no longer safe to use, stop using it, use some other things, is that its data at rest is not stored in encrypted form.\r\n\r\nLEO:  Interesting.\r\n\r\nSTEVE:  And again, you know, who knows with Congress.  But still, that at least clarifies that.  So thank you, Chris.\r\n\r\nMatt Oliver said:  \"Hi, Steve.  It's Thursday evening here in New Zealand, and I am continuing with my weekly regime of watching/listening to Security Now!.  I was super surprised tonight with your mention of Crypto/ATMs and their fraudulent use, as the New Zealand government just yesterday announced that they're introducing a bill to outright ban them in New Zealand as part of an anti-money laundering bill update.\r\n\r\n\"They're also heavily limiting cash transfers out of New Zealand, but that's another story,\" he wrote.  \"It will stop these criminals from being able to extort cash from unsuspecting victims.  But if someone in New Zealand wants to invest more than $5,000 overseas, it seems they'll be limited to breaking it up into multiple transactions.  I'm not too sure where the line should be.  It seems like only a few weeks since you shared Episode 1000.  How can you be at 1033 already?\"\r\n\r\nLEO:  It's amazing.\r\n\r\nSTEVE:  Yeah, tell us about it.  It does seem like quite a while ago.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  So anyway, it does appear that the Crypto/ATM business may be in for some rocky times.  We know that the creation of cryptocurrency itself really opened the floodgates for extortion and ransomware.  Cryptocurrency is so handy, but also so inherently prone to abuse.  So I suppose it should come as no surprise that Crypto/ATMs would be no less abuse prone.\r\n\r\nJeff, a listener, said:  \"Hello, Steve.  On Security Now! podcast 1033 you discussed the Apple and WhatsApp responses to the Israeli spyware vendor attacks, and in particular you mentioned that WhatsApp was able to remediate the PDF FreeType font rendering vulnerability issue on the server-side without changes to the client.\"  That's right, I quoted a WhatsApp rep saying that about WhatsApp.\r\n\r\nAnd Jeff asks:  \"Since WhatsApp is supposedly end-to-end encrypted, how could this have been implemented?  Meta should have no visibility into chat contents, although perhaps non-text content is sent in the clear, which would be an interesting admission on its own, especially since CSAM and other illegal non-text-based content is used as a justification to add backdoors to encrypted communications.  Unless I'm missing something obvious, this seems like a very big deal, but would want to confirm the reporting before jumping to any conclusions.  Signed, Jeff.\"\r\n\r\nAnd for what it's worth, Jeff's note was similar to that from many of our astute listeners who have been paying attention and pointed out the same issue, asking the same question, which amounted to:  Meta said that they were able to deal with the Apple zero-day on the server side without requiring their clients, the WhatsApp apps, to be updated.  But if all of WhatsApp communications are actually end-to-end encrypted, with the bad guys sending maliciously formatted PDFs to targeted victims, how would that have been possible?\r\n\r\nWe've got great listeners, and they were 100% right.  That's what's known in the industry, actually, as a \"damn good question.\"  Last week I glibly and incorrectly assumed that they could just scan any PDFs for the deliberately malformed exploit, see that, and refuse to deliver it.  But they obviously can't do that.  Meta should have absolutely zero visibility into any of the content being transacted.\r\n\r\nSo to Jeff's and many of our listeners' points, there's really nothing at all that Meta should have been able to do on the server side.  The only thing I can imagine that perhaps explains WhatsApp, like what could be going on, is that perhaps WhatsApp doesn't attempt to contain complete rendering code internally in the app.  That is, the app could be modular.  It might be that PDF rendering code from the server is done on the fly in some circumstances.  For example, the decrypted PDF might be sent to Meta for rendering back into text.  Or there might be a module in the WhatsApp app which Meta could have updated to fix the rendering problem themselves.\r\n\r\nBut it sounds like maybe PDFs are actually being rendered at Meta, and that they fixed the bug there.  And so, you know, that is a little bit of a glitch in the end-to-end encryption.  If PDFs actually go to Meta after being decrypted in order to have the PDF rendered, then that's something that would be worth pointing out, too.\r\n\r\nLEO:  Let me - there is one thing that you can do if you are using WhatsApp, not about PDFs, but about encryption, I'm looking at my WhatsApp.  And in the chat backup there is an option, off by default, to end-to-end encrypt your backup.  So you could turn that on.\r\n\r\nSTEVE:  Oh.\r\n\r\nLEO:  So thanks to Darren Oakey, who pointed this out.  It's actually in the software.\r\n\r\nSTEVE:  So maybe the problem is that it's off by default.\r\n\r\nLEO:  It's off by default, so maybe people should turn it on.\r\n\r\nSTEVE:  Yeah.\r\n\r\nLEO:  I just lost [crosstalk].\r\n\r\nSTEVE:  Anyway, definitely a tip of the hat to our listeners who have been paying attention.\r\n\r\nLEO:  That's really interesting, that they're rendering it.\r\n\r\nSTEVE:  And said, wait a minute; you know?  Yeah.  So, well, either they're rendering it on their servers, which kind of is what it sounds like, or they're able to update a rendering module of WhatsApp without updating the entire app.\r\n\r\nLEO:  Right.\r\n\r\nSTEVE:  So, I mean, I'm like explaining around their claim that they're able to do this.  It would be nice to know actually how they're able to do it.  I don't know.\r\n\r\nCasey said:  \"Steve, just wanted to share today a neat tool from the EFF called Cover Your Tracks.\"\r\n\r\nLEO:  Oh, yeah.\r\n\r\nSTEVE:  And it's at coveryourtracks.eff.org.  He says:  \"This is a useful tool for anyone who wants to test and better understand browser fingerprinting.\"  He said:  \"A coworker had shared news of a breach that didn't seem completely straightforward from Cybernews (cybernews.com) that I was analyzing when I had found this link to the EFF tool.  Many articles from the Cybernews site seemed to promote their own tools and to engage users mostly for advertising purposes, but one stood out since it correlated with the Browser Fingerprinting episode you recently shared.  I would be interested to know your take on this site, and tools like their password leak checker.  I'm skeptical\" - meaning of Cybernews's implementation - \"that 16 billion credentials were leaked earlier this year\" - that does seem like a high number - \"and skeptical of their recommendations, which seem biased.\r\n\r\n\"This dive gave me more reasons why I'm happy to be able to hear from you each and every week.  I've been following your work since before the days you published the experiences\" - oh, yeah - \"with the once-named 'Wicked' script kiddie and the adventures you had infiltrating the IRC site that was being used to DDoS your site.  I won't tell you how old I was at the time;  but, boy,\" he said, \"but boy, those are classic.  Can't count the number of times I've used and recommended SpinRite, Security Now!, Vitamin D, the healthy sleep formula, the Picture of the Week, and the many more things you share.  Let's just say that even while on vacation I couldn't help but think about you and Security Now! while visiting Irvine and the beautiful surrounding area.  Thanks for everything, Casey C.\"\r\n\r\nWell, Casey, thanks very much for your note.  I'm so tickled that so many of my wanderings have been useful to you and your colleagues.\r\n\r\nI'm aware of the EFF's Cover Your Tracks page, and in past years we've talked several times about their earlier effort \"Panopticlick,\" which they released at v3.0 level back in 2017.  But the coveryourtracks.eff.org site and that work is their latest, and it serves as a perfect follow-on to our recent discussion of browser fingerprinting.\r\n\r\nI just went there with my Firefox browser, which is running uBlock Origin and Privacy Badger.  So both those two things, uBlock Origin and Privacy Badger.  The EFF's Cover Your Tracks site performs proactive fingerprinting of the same sort that's performed by tracking sites and shows what THEY are able to see.  After auditing my browser, I'm going to share what that site showed me about my browser, Leo, after we take another break.\r\n\r\nLEO:  Okay.  All right.  Let's see.\r\n\r\nSTEVE:  Okay.  So I go to coveryourtracks.eff.org with my Firefox browser, loaded with uBlock Origin and Privacy Badger.  The result page says:  \"Here are your Cover Your Tracks results.  They include an overview of how visible you are to trackers, with an index and glossary of all the metrics we measured below.  Our tests indicate that you have strong protection against web tracking.\"  Yay.  Okay.  So they quickly divide this into three categories.  Is your browser blocking tracking ads?  Yes, it is.  Is it blocking invisible trackers?\t Yes, it is.  Is it protecting me from fingerprinting?\r\n\r\nLEO:  Oh.\r\n\r\nSTEVE:  They answer:  \"Your browser has a unique fingerprint.\"\r\n\r\nLEO:  Ah.\r\n\r\nSTEVE:  And they say:  \"Note:  Because tracking techniques are complex, subtle, and constantly evolving, Cover Your Tracks does not measure all forms of tracking and protection.\"  You know, they're here to make a point, but boy, do they.  They said:  \"Your browser fingerprint appears to be unique among the 244,246 browsers tested in the past 45 days.\"  Okay.  Ouch.  So that's a bit shy of one quarter million visitors who have used Cover Your Tracks over the past month and a half, and not one of those visitors' browsers had the same fingerprint as mine.\r\n\r\nLEO:  Or mine, as it turns out.\r\n\r\nSTEVE:  Whoops.\r\n\r\nLEO:  But that's the thing we were talking about the other day.\r\n\r\nSTEVE:  Exactly.\r\n\r\nLEO:  It's almost impossible to prevent.\r\n\r\nSTEVE:  So, for example, they check the headers.  My user agent header says Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:140.0) because that's, 140, that's got to be the version number of Firefox.  Then I've got Gecko/20100101 and Firefox/140.0.  So that's my user agent header.\r\n\r\nLEO:  For some reason almost everything identifies as Mozilla.  I don't - it's bizarre.\r\n\r\nSTEVE:  And it still is.  You're right.  Everything starts with Mozilla/ something.  And it's purely history.  It's because the very first browser was Netscape, and you had to have that in the user agent to tell the early web servers that you were a user-based web browser, not some other robot or something.  So it's just there.  Everything has it.  So they note that that user agent header as it is conveys 4.41 bits of identifying information.  In other words, it is - and the reason bits can be fractional is log power of 2 reasons.  The point is that one in 21.21 browsers share this value.\r\n\r\nLEO:  So it's already narrowed it down that much.\r\n\r\nSTEVE:  Yes.\r\n\r\nLEO:  Just from the user agent.\r\n\r\nSTEVE:  That one user agent of that 244-plus thousand browsers they've seen in the last 45 days, my browser has been reduced from that population to one in 21.21 of that entire set.  And that's 4.41 bits in binary terms.\r\n\r\nThen we have another header, the HTTP_ACCEPT Header, which contains another bunch of stuff.  It says that the browser wants to receive HTML text.  It doesn't care about the name and path name.  It's able to unzip the data using gzip or deflate or br or zstd.  It wants English as its standard language.  And basically it says, you know this is who this guy is, again, from the standpoint of the server.  And they note, okay, that's a lot of information to give.  That further presented nearly 2 bits.  So it was 1.91 bits of data.  Two bits, right, would have been one in four.  This is one in 3.76 browsers have the same value my Firefox browser had.  \r\n\r\nThen there's a list of plugin information, the plugins that the browser contains.  I've got five of them, plugin 0 through plugin 4.  Turns out not very unique.  All of that list of plugins was only worth 0.64 bits of identification, so I'm one in 1.56 browsers with that value.\r\n\r\nLEO:  Mine, too.  I have switched to Arc over here, and this is, it's funny, user agent is still Mozilla.\r\n\r\nSTEVE:  Uh-huh.  Oh, yeah.\r\n\r\nLEO:  And it says it's an Intel Mac, which it's not, but okay.\r\n\r\nSTEVE:  Yeah.\r\n\r\nLEO:  So, but just like you I have four plugins which give it the same bits of identifying information.\r\n\r\nSTEVE:  Yeah.  Yeah.  I've got Time Zone Offset that is something that my browser is announcing, that is, what is my time zone.  And that's worth 4.11 bits of information.  So one in 17.31 browsers also have my time zone offset of 420, which is an interesting time zone.\r\n\r\nLEO:  Isn't that an interesting offset.  I don't know what that is.\r\n\r\nSTEVE:  Uh-huh.\r\n\r\nLEO:  That's an Elon Musk offset.\r\n\r\nSTEVE:  That's right.  Also the actual explicit time zone is set to America/Los_Angeles.  Well, that's good for 4.4 bits of additional discrimination among all the browsers in the world.  So one in 21.05 browsers share that value.  The screen size that I happen to be using, boy, did that make me unique.\r\n\r\nLEO:  Oh, interesting.\r\n\r\nSTEVE:  I happen to be on a screen, it's one of those curved wide screens.\r\n\r\nLEO:  Oh.\r\n\r\nSTEVE:  So it's 3840x1600x24 resolution.  Interestingly enough, that's 11.65 worth of - that's almost 12 bits of identification compared to all the other browsers visiting.  That eliminated - that put me into a subset of one in 3213, 3,213, almost 214 browsers.  So...\r\n\r\nLEO:  That's bad; right?\r\n\r\nSTEVE:  That's bad.\r\n\r\nLEO:  You want to be less unique, not more unique.\r\n\r\nSTEVE:  Yes.  It's highly identifying for me to use that bizarre screen.  So maybe use a Palm Pilot, I don't know.\r\n\r\nLEO:  Oh, just give up.\r\n\r\nSTEVE:  The particular system fonts you have, they're all listed there.  So the server, I mean, this is nonsense.  Why are our browsers blabbing that I got Calibri and Cambria and Cambria Math and Comic Sans MS and Consolas and Lucida.\r\nLEO:  Yeah, that's crazy.\r\n\r\nSTEVE:  You know, it's like nuts.\r\n\r\nLEO:  But it's a great, well, you know, that's because the website might do a query saying, hey, do you have Lucida Grande?  Can we show the - you know.\r\n\r\nSTEVE:  Exactly.  Exactly.  Oh, he's got Palatino Linotype.\r\n\r\nLEO:  Oh ho ho, we love that one, yeah.\r\n\r\nSTEVE:  Yeah.  Let's use that.  Anyway, that's good for 3.2 bits worth of...\r\n\r\nLEO:  I still have Wingdings on my computer.\r\n\r\nSTEVE:  Wingdings, oh, I do, too, via direct JavaScript.  You and I both.  And I'm a big Verdana fan.\r\n\r\nLEO:  Yeah, I like Verdana, yeah, yeah.\r\n\r\nSTEVE:  And Tahoma's there and, yeah.  Anyway, so, oh.  And are cookies enabled?  Yes.  Although it turns out that doesn't help very much.  Get this.  Cookies being enabled, which of course you have to have...\r\n\r\nLEO:  Everybody, right.\r\n\r\nSTEVE:  ...that's 0.07% worth of discrimination.  So only good for one in 1.05 browsers.  Basically everybody.  Because if you don't have cookies, I don't know what you can do.  And then what about the supercookies?  DOM storage, yes.  DOM session storage, yes.  IE user data, no.  Open database, no.  Index DB, yes.  So that's good for not much, 0.18 bits' worth of further discrimination.\r\n\r\nLEO:  You're pretty normal there, yeah.\r\n\r\nSTEVE:  One in 1.13.  Yes, pretty normal there.  Then we get the graphic canvas fingerprinting, which is really interesting.  I'll explain what they say.  They said:  \"A tracking site can perform a specific test on the HTML5 <canvas> element.\"  That's actually where you're able to draw on the user screen using JavaScript.  They said:  \"This metric is the unique identification the tracker assigns to your browser after it performs this test.  Canvas fingerprinting is invisible to the user.  A tracker can create a 'canvas' in your browser...\"\r\n\r\nLEO:  Offscreen, not visible, just offscreen.\r\n\r\nSTEVE:  Offscreen, yup, \"...and generate a complicated collage of shapes, colors, and text using JavaScript.  Then, with the resulting collage, the tracker extracts the actual bitmap data about exactly how each pixel on the canvas is rendered.\"  They said:  \"Many variables will affect the final result.  These include your operating system, your graphics card, your firmware version\" - things you can't change, you know, readily - \"graphics driver version, and installed fonts.\"  They said:  \"This is a complex and very reliable fingerprinting metric for trackers.  Slightly different images will be rendered due to small differences in video card hardware, drivers, operating system, and installed fonts.\"  So despite all that, not a lot of identifying information, 1.57 bits' worth in my own browser.\r\n\r\nLEO:  Mine's 9.22.  Mine's really - yeah, interesting.\r\n\r\nSTEVE:  Interesting.  Well, you probably have fancy stuff going on, Leo.\r\n\r\nLEO:  I do, yeah.\r\n\r\nSTEVE:  I'm a generic Intel video on an Intel NUC.  So I share all of those characteristics with one out of every three browsers out of that 244,000.\r\n\r\nLEO:  Mine is one out of 595 browsers.\r\n\r\nSTEVE:  Wow.  Yup.\r\n\r\nLEO:  That's interesting.\r\n\r\nSTEVE:  That's because you're fancy.\r\n\r\nLEO:  Again, the higher that number, the worse because you're more unique.  More special.\r\n\r\nSTEVE:  Yup.  You're more able to discriminate.  They're able to discriminate you from other browsers.\r\n\r\nLEO:  Oh, but wait'll you see my WebGL fingerprint.\r\n\r\nSTEVE:  Oh, boy.\r\n\r\nLEO:  Oh, boy.\r\n\r\nSTEVE:  Again, mine's not very fancy because I'm just using an Intel built-in graphics thing.  I'm 1.72 bits.  And so I'm less, I'm about one in 3.3 browsers.  You...\r\n\r\nLEO:  I'm one in 10,656 browsers.\r\n\r\nSTEVE:  Oh, they're tracking you so bad.\r\n\r\nLEO:  They know who I am now.\r\n\r\nSTEVE:  Right.\r\n\r\nLEO:  Wow.  And that's value for just this fingerprint.  So remember, we've got to combine them all, right, to get a really pretty good...\r\n\r\nSTEVE:  Just this component.\r\n\r\nLEO:  Right, right.\r\n\r\nSTEVE:  Of your fingerprint, yes.  So that's a lot of bits they've got on you.\r\n\r\nLEO:  Oh, not good.\r\n\r\nSTEVE:  Also WebGL Vendor & Renderer.  There, because there are so many possibilities, that's a lot more identifiable.  I'm at 6.32 bits, so I'm about one in 80 browsers share my particular combination for WebGL Vendor & Renderer.  And you're, what, a little higher than that.\r\n\r\nLEO:  One in 1400.  Ten and a half bits.\r\n\r\nSTEVE:  Yeah.  And then we both had the DNT header enabled.\r\n\r\nLEO:  Fools that we are.  Ironically, turning that on gives them more bits of information.\r\n\r\nSTEVE:  Yup.\r\n\r\nLEO:  Most people don't do it.  Only half of the people do it.\r\n\r\nSTEVE:  It's like, where you can, you just want to kind of blend in with the herd, if possible...\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  ...in order to be less identifiable.  Language being English, that was less than a bit worth, so 0.87 for me.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  And 0.86 for you.  My hardware specs, it thinks I'm on a - it says, you know, platform Win32, 1.29 bits.  Touch support is less than a bit.  Interestingly, the audio context fingerprint for me was way up.  I mean, up in terms of number.  It turns out that whatever the audio context fingerprint is, the value they got was 35.749972093850374.  Whatever that is, it's only worth a little over 2 bits, 2.27 bits of specificity there.\r\n\r\nLEO:  You probably have a very common audio card, then.\r\n\r\nSTEVE:  Again, it's the one built into the Intel NUC, so I bet that is, yup.\r\n\r\nLEO:  Right, yup, yup.\r\n\r\nSTEVE:  And yours is somewhat less so.\r\n\r\nLEO:  Probably Realtek.  Mine's, yeah, because it's a Mac, so it's - just by virtue of being a Mac it's less common, yeah.\r\n\r\nSTEVE:  So anyway, so what we have with all these many parameters is that, you know, although none of them taken alone would be super useful for identifying a single browser, but when you contribute, when you concatenate all the effective unique bits that each of those parameters offer, you end up, in my case, they've never seen, that site has never seen in the last 45 days and more than 244,000 browsers, nobody else has come along with exactly the same combination.\r\n\r\nLEO:  That's good; right?\r\n\r\nSTEVE:  They don't need a cookie.  They don't need anything else.\r\n\r\nLEO:  Oh, no, it's bad.\r\n\r\nSTEVE:  To know who I am.  That's not good.\r\n\r\nLEO:  You're one in a quarter million.\r\n\r\nSTEVE:  That's not good.  And so our takeaway here is that, you know, and I've got uBlock Origin and Privacy Badger running.\r\n\r\nLEO:  Doesn't matter.\r\n\r\nSTEVE:  It said you're blocking ads.  You're blocking trackers.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  Doesn't matter.\r\n\r\nLEO:  Yeah, yeah.\r\n\r\nSTEVE:  Our fingerprinting, tracking, today's tracking technology has become serious.  It's become that serious.\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  That, you know, unfortunately it's JavaScript.  Remember, I talked about this last week.  I tried turning off JavaScript for third-party, where the site I would go to, they can run their own JavaScript on my page, but not any third-party, not any advertisers.  I was immediately unable to make a restaurant reservation.  Just couldn't.  Because unfortunately, today's web pages are pulling technology from everywhere else.  Nobody does their, like, rolls their own reservation system.  They use OpenTable.  Why?  Why reinvent the wheel?  And they use Salesforce for this, and they use OAuth for that.  And they, I mean, they just use technology from everywhere.  Everybody wants to run their script on your browser.  And trying to turn off third-party scripting breaks immediately.  And it's third-party scripting that the advertisers are leveraging to generate these super unique fingerprints.\r\n\r\nAnd as we found out last week when we talked about this, they are using the fingerprint to regenerate a cookie.  Cookie is still the gold standard.  They want to get a cookie because nothing's better than that.  But if you delete them, or change browsers while you're on the same IP, or on the same machine, they can still lock onto your altered but identifiably changed fingerprint and re-cookie your new browser or refresh a cookie that you just deleted.  You know, I kind of understand, Leo, why you've given up.\r\n\r\nLEO:  Yeah.  Yeah.\r\n\r\nSTEVE:  Because, like, you know...\r\n\r\nLEO:  Ironically, if you use NoScript, that probably narrows it down even more.  Right?\r\n\r\nSTEVE:  Yeah, nobody does that.  So you'd be one in a bazillion.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  Because you can't, you can't turn off scripting any longer.\r\n\r\nLEO:  So it's kind of counterintuitive, but the more protections you have, probably the more identifiable you are.\r\n\r\nSTEVE:  Yeah, the more generic you could be.  You know?  You would like to have a browser where they said, well, we don't know who you are; but, you know, half the browsers that came by looked the same as you.  Use Edge.\r\n\r\nLEO:  Yeah.  That would be good.  No plugins, run your screen at 1920x1080, you know, I mean, things like that; you know?  It's things you don't want to do, frankly.\r\n\r\nSTEVE:  Yeah.  Okay.  And our last bit of feedback, Paul, said:  \"Steve, listening to yesterday's podcast, and the type memory overflow Paragon used for WhatsApp PDF attacks made me wonder something.  If all interpreters were rewritten in memory safe languages, would they be problem-free?  Or just have a way smaller attack surface?  I'm not sure if the problems with interpreters have historically been memory safety related, or other problems like input sanitation not being checked.  If it is input related, from my understanding that would not be fixed by memory safe languages.  Thanks, Paul.\"\r\n\r\nSo that's a terrific question.  I think the fairest way to evaluate this would be to observe that the problems with interpreters have historically been the same as the problems with any other class of code.  So same mix of problems.  But that interpreters tend to be problem magnets due to the particularly large attack surface they present.  It is an interpreter's inherent nature to be heavily directed by the content of the data they're interpreting.  That's the unique characteristic that makes interpreters interpreters, and inherently more prone to abuse.  There's much greater opportunity for their abuse by way of abusing the formatting of that data.  By comparison, for example, code whose functioning is entirely independent of the data it is processing is going to be inherently far less vulnerable.\r\n\r\nSo, yes, the benefit derived from writing interpreters in memory-safe languages would likely be significant, not because interpreters are necessarily more prone to the problems that are often resolved through the use of memory-safe languages, but because interpreters are just generally so much more prone to all problems of coding, and memory-safe languages have been shown over and over to be terrific for preventing one large class of memory-related coding mistakes.\r\n\r\nAnother way of expressing what Paul suggests is that, if one wanted to begin the work of rewriting a large body of code in a memory-safe language, a great place to begin that work to quickly realize the largest increase in security and operational integrity would be anywhere the functioning of the code is subject to the specific contents of its data.  That's the nature of interpretation and the location of an historically oversized percentage of coding mistakes.  Like, you know, through time.  So, you know, if you've got a big project, you're saying, hey, let's recode this in Rust or Java or something, first recode the interpretation part of that large object, if there are some.  That's going to be where you'll get a large amount of leverage from that recoding effort.  Okay.  Now, Leo.\r\n\r\nLEO:  Yes.\r\n\r\nSTEVE:  And our listeners.  After this next final sponsor, this is where I think our listeners would have fun if they involved their kids because we're going to have some fun.  \r\n\r\nLEO:  Uh-oh.  This is our Zero-Knowledge segment coming up.  I can tell.  Okay.\r\n\r\nSTEVE:  Introduction to Zero-Knowledge Proofs.\r\n\r\nLEO:  Oh, boy.\r\n\r\nSTEVE:  And there are some fun thought problems.\r\n\r\nLEO:  This will be good for me, too.  I have a childlike brain, so this should work very well for me.  We'll see.  Stay tuned.  All right.  You say it's not a propeller hat, but I'm going to gird myself.\r\n\r\nSTEVE:  We're going to have fun.\r\n\r\nLEO:  Okay.\r\n\r\nSTEVE:  Okay.  So first of all, a little bit of background here.  The recent issues, the reason we're talking about zero-knowledge proofs, is these recent issues surrounding the growing pressure to create some means of providing online age verification, with its accompanying worrisome implications for privacy, has brought a somewhat obscure, but quite interesting, bit of academic technology into the foreground.  This area of study and recent development for computers is known generically as \"Zero Knowledge Proofs.\"  That's sometimes abbreviated ZK Proofs or just ZKPs.\r\n\r\nNow, as we know, when discussing cryptographic protocols, as we have often done here and as is typically done in the literature, the various participants are given representative names.  Alice is typically the initiator of a communication.  Bob is typically, you know, A and B, Bob is the recipient of that communication.  Eve is the name given to someone attempting to eavesdrop on that communication between Alice and Bob.  Mallory is a malicious attacker, or maybe Mallory-in-the-Middle.  And if additional participants are needed for multi-party communications, we typically bring out Carol and Dave.\r\n\r\nLEO:  Okay.\r\n\r\nSTEVE:  To be the C and D of the A, B, C, and D group.  Now, for today's discussion we're going to introduce two new characters who we've never used before.  Peggy is someone who wishes to prove something, and Victor is the verifier of what Peggy wishes to prove.  Or maybe Victor is the person that Peggy needs to convince of something.  So she makes an assertion.  She's trying to convince Victor.  So we have Peggy and Victor.\r\n\r\nNow, a formal description of any zero-knowledge proof is pretty short.  It reads something like this.  It would say:  \"A zero-knowledge proof is a protocol by which one party (the prover) can convince another party (the verifier) that some given statement is true, without conveying to the verifier any information beyond the mere fact of that statement's truth.\"  So it's an interesting problem.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  In other words, the verifier learns nothing beyond the truth of the assertion that the prover wishes to make.\r\n\r\nLEO:  I am over 13, for instance.\r\n\r\nSTEVE:  Okay.  By comparison, instances of what we might term a \"knowledge-based proof\" as opposed to a \"zero-knowledge proof,\" you know, they're all around us; right?  Someone can prove their assertion of some information simply by revealing it.\r\n\r\nLEO:  I know this, yes.\r\n\r\nSTEVE:  Like I'm over 13.  Look at me.  Right?\r\n\r\nLEO:  Or look at my, yeah, my identity card or whatever, yeah, yeah.\r\n\r\nSTEVE:  Yeah.  So there you're giving the person information beyond your assertion that you're over 13.\r\n\r\nLEO:  And we don't want to do that.\r\n\r\nSTEVE:  Right.  The tricky \"zero-knowledge proof\" part is to prove the possession or prove the assertion is true while not revealing any information or any aspect of it.\r\n\r\nLEO:  Hmm.\r\n\r\nSTEVE:  Uh-huh.  So the formal requirements for true zero-knowledge proofs are actually even higher than this because we want true zero-knowledge.  There should be no knowledge received that can - get this, Leo - that can be passed on to a third party.  That is, Peggy may prove something to Victor, but Victor doesn't gain anything that allows him to prove it to someone else.  So there's actually an even higher bar.  You know, the verifier in this setting, even after they've been convinced of the truth of the prover's statement, should nevertheless be unable to prove that statement to any other third party.\r\n\r\nSo some zero-knowledge proofs can be interactive, meaning that the prover and the verifier exchange messages following some protocol.  I'll show that.  We're going to look at three examples.  The first and the third use Peggy and Victor.  The second is an interactive, well, actually the second and third are both interactive.\r\n\r\nSo I titled today's podcast \"Introduction to Zero-Knowledge Proofs\" because I wanted to start everyone thinking about this, what is really a fascinating realm, without getting bogged down and mired in cryptographic esoterics.  And it turns out it's not necessary, since there are some very cool physical examples that we're going to look at which should serve to get everyone thinking about this topic broadly.\r\n\r\nAlso, although computer scientists are excitedly talking about zero-knowledge proofs being useful for the online age verification problem, you know, at best, ZKPs will only be one useful part, or one needed, one required part, of the solution.  So yes, people are talking about this, zero-knowledge proofs, regarding age verification.  But to me, the problem mostly, the problem of age verification mostly involves somehow linking a person's verifiable date of birth to an unspoofable biometric.  You know, once you have that, a zero-knowledge proof could be used to prove an assertion of age without revealing anything more.  Or maybe the way it's used is you need to convince your iPhone that you're older than 18, but you don't want Apple to know anything more about you.\r\n\r\nLEO:  Ah.\r\n\r\nSTEVE:  Then the biometric is used for Apple's iPhone to disclose its belief of that to a third party.  And so you managed to share nothing with Apple, yet you have convinced Apple that you're over 18, so then it's able to convince other people who ask.  So we've got a ways to go.  It's not like this zero-knowledge proof business is just going to solve all of our problems. \r\n\r\nOkay.  So I want to make absolutely certain that everyone appreciates this is not some sort of magic, again, age verification technology.  It'll just be part of a much larger system.  But it is arguably a requirement if, for example, you would like Apple to be able to assert your age without telling Apple anything more.  That's where the zero-knowledge would come in.  So our goal today is to develop some sense for what it means to have a zero-knowledge proof system.\r\n\r\nOkay.  So we're going to look at, as I said, three examples.  So let's give - so what do we mean by zero-knowledge proof?  Let's give it some context.  A perfect place to start is a classic ZKP demo, known as \"Where's Wally.\"  Now, imagine that there's a large sheet of paper, let's say two feet by two feet.  And printed on this sheet is a solid mass of tiny line-drawn cartoon characters of various colors, doing various things.  And somewhere hidden in plain sight is Wally.\r\n\r\nBut nothing obviously distinguishes Wally from any of the other characters.  And there is so much going on, I mean, this sheet is covered with these little guys doing stuff, so much visual noise printed on this - now, since it's two feet by two feet, that's four square feet of paper - that even knowing what Wally looks like, even being able to recognize him if you saw him, there's just no way to find him hiding in plain sight, as it were, among everything else that's going on.\r\n\r\nLEO:  Okay.  He's not wearing a funny hat and striped knickers.  He's completely normal.\r\n\r\nSTEVE:  Or everybody else is, too.\r\n\r\nLEO:  Oh, okay.\r\n\r\nSTEVE:  I mean, it's just a, just a, just a complete confused...\r\n\r\nLEO:  Blends right in.\r\n\r\nSTEVE:  Exactly, blends in, hidden in the noise.  But Peggy, the prover in our zero-knowledge proof example, she knows where Wally is.  And she wants to prove to Victor the verifier that she knows.  Now, before this, Victor has been visually scouring this four square foot sheet of paper over and over.  He's looked everywhere, multiple times, until he's become convinced that Peggy is full of it, and that there's no Wally printed anywhere on the sheet.  Peggy claims otherwise.  She says, \"Oh, yeah, I know where he is.\"  She's rather proud of her discovery, and she's become somewhat annoyed with Victor claiming that she's not telling him the truth.  So she's decided that she's not going to show him where Wally is.\r\n\r\nLEO:  Well, well.\r\n\r\nSTEVE:  She wants to keep Wally's location a secret from Victor even after proving, not only that Wally does exist on the sheet, but also that she knows where Wally is.  If she can pull this off, it's going to further drive Victor nuts because he'll know for sure that there's a Wally there somewhere, but still have no idea where.\r\n\r\nLEO:  I like this game.\r\n\r\nSTEVE:  So how does Peggy create a zero-knowledge proof of Wally's existence on the sheet of paper while keeping his location secret?  She gets another much larger sheet of paper, double the length in each dimension, so it's 4 feet by 4 feet.  And in the center of that larger sheet she cuts a small hole the size of Wally on the printed sheet.  She positions the top cover sheet, while Victor is out of the room, of course, over the printed sheet with Wally's image visible through the hole.  There's Wally!\r\n\r\nLooking at what Peggy has done, she invites him in and says, okay, I'll prove to you that there's a Wally here.  So Victor comes in the room.  Victor cannot deny now that there's Wally.  She's proven that.\r\n\r\nLEO:  Yes.\r\n\r\nSTEVE:  And the fact that Peggy was able to place the large cover sheet over the printed sheet so that Wally's image appears though the little hole in the center of the cover sheet further proves that Peggy knows where Wally is on the printed sheet.  But thanks to the fact that the cover sheet is twice as long in each dimension as the sheet it's covering, the printed sheet would be covered up no matter where on that lower sheet Wally was printed.  Peggy has accomplished her task.  She has definitively proven to Victor that Wally exists on the original printed sheet, while giving him absolutely no information about where Wally might be.  Peggy the prover constructed a zero-knowledge proof of Wally's existence and that she knows his location.\r\n\r\nThere's something else worth noting here which is part of the definition of zero-knowledge proofs and which can be important in some applications.  As I mentioned before, although Victor is now utterly certain that Wally does exist and that Peggy does know where Wally is, Victor is still unable to now prove that to anyone else because he still can't find Wally.\r\n\r\nLEO:  Right.\r\n\r\nSTEVE:  Peggy made him leave.  She took the top sheet off.  He came back.  He's still pissed off now because he knows Wally's there somewhere.  And he absolutely knows it.  But he can't prove it to anybody else, either.\r\n\r\nOkay.  So next example.  This next example demonstrates some other properties of this interesting realm.  We've got two competitors.  They have so far each been allowed to purchase some number of a rare and precious item from a common supplier.  They want as much as they can get.  They've each been allowed to purchase a certain amount.  The supplier claims that both parties have been allowed to purchase the same number of these items, but as part of the purchase agreement the supplier made them sign an NDA (non-disclosure agreement) which has bound them to keep the number of items they were each sold a secret, especially from one another.  They're not allowed to divulge to anyone, especially each other, how many they have been allowed to purchase.  The supplier says, \"I've sold you both the same amount.\"  If they violate that NDA, they will lose any opportunity to purchase any more of these precious items in the future.\r\n\r\nThe problem is they're competitors.  They need these things.  And they don't trust completely the supplier's claim, their assertion, to have sold them so far the same number.  So they want to verify, or in this case to prove, that they have both purchased the same number of items without breaching their NDA and revealing the number of items each has purchased.  The items, as it turns out, are only sold in lots of 100, so they may have each purchased 100, 200, 300, or 400 of the items.  They know how many they have purchased, but they don't know how many their competitor has purchased.  And neither of them is allowed to reveal their purchase quantity to the other.  What they want to know is whether the seller has told them the truth, just that, the truth about having sold them each the same number of units, yes or no?\r\n\r\nWhat they need is a zero-knowledge proof, and over drinks one night they devise a way to accomplish this.  They get four identical small lockable boxes, each having a differently keyed lock.  So four lockable boxes and four keys, one for each box.  Into the top of each box they cut a small slit through which a piece of paper can be dropped, like a little ballot box.  The four boxes are labeled 100, 200, 300, and 400, corresponding to the number of items each has been able to purchase from their common supplier.  And each box is locked with its respective key, which is left in the lock, and all four boxes are placed alone on a table in a room with a door.  They also prepare four slips of paper.  One piece, one slip of the paper has a big green checkmark on it, and the other three have a big red \"X.\"\r\n\r\nThe two competitors gather outside the room containing these four boxes, and they flip a coin to decide who's going to go first.  The winner of the coin toss enters the room and closes the door behind him.  He goes to the box which represents the quantity of items he has purchased - 100, 200, 300 or 400.  He removes its key and places it in his pocket.  He also removes the other three keys from the other three boxes.  So now all the boxes look the same; right?  They're just - there are four locked boxes.  There are no keys.  He leaves the room, closes the door behind him.  Then together the two of them destroy the three keys for the other boxes which will never be opened.  Okay.  And that first guy has kept the key for the one box that corresponds to how many items he's purchased.\r\n\r\nNext, the other competitor takes the four slips of paper into the room and closes the door behind him.  He drops the slip of paper having the big green checkmark into the top slot of the box which corresponds to the quantity of items he has been allowed to purchase from their common supplier - again, 100, 200, 300, or 400, whichever box - and he drops the three big red \"X\" slips into the other three boxes.  And then he exits the room and closes the door.\r\n\r\nFinally, the first person who removed and retained that one key from the one box, which only opens the box corresponding to the quantity of items he has purchased, enters the room and closes the door.  He goes to that box, he returns to the box for which he has the key, and that key will only open that box, uses the key to open the box, and withdraws the slip of paper that box contains.  He relocks the box, so now they're all locked again, and exits the room with the slip of paper and shows it to the competitor.\r\n\r\nOnly if the box he had the key for was the same box as his competitor dropped the green checkmark paper into will he have been able to successfully withdraw a piece of paper containing a green checkmark, and in that case they will have confirmed to each other that they have each been able to purchase the same quantity of items from their shared supplier.  In other words, if the first competitor withdrew a slip of paper with a red \"X,\" they will both know that they have been lied to by their seller, but that is all they know.  They only get a yes or no.  They don't learn anything else.  Neither of them will have learned how many of the items the other has been able to purchase, so they will not have disclosed that to the other, and thus will not have breached their purchase agreement.\r\n\r\nThey did not breach their agreement.  They did not breach their NDA.  If they don't know how much - if they learn, if a red \"X\" gets pulled out after that third round, they only know they have not both purchased the same amount, but not how much.  So there again, that is an interactive zero-knowledge proof, where nothing is learned, no information is gained, other than the verification of an assertion.\r\n\r\nOkay.  And for the third example, we're going to look at one that involves statistical proof.  This is another famous thought experiment often referred to as Ali Baba's Cave.  And for this we return to Peggy and Victor.\r\n\r\nA cave is discovered which has an odd shape.  It has a cave tunnel shaped in a ring, with an entrance in the side of the mountain on one side of the ring-shaped tunnel, and a locked door which completely blocks the tunnel at the opposite, deep inside the mountain, the opposite side of the ring.  So the locked door, which is far away from the tunnel's opening from the outside, cannot be seen since it's deepest in the back of the ring tunnel.\r\n\r\nPeggy, who returns as our prover, claims to have discovered the magic word that can unlock the door from either side.  But once again, Victor - oh, Victor.  He's skeptical.  Before this, Victor - and it's understandable why he's skeptical - he had tried every word he could think of.  No matter what he says to the door, it remains stubbornly locked.  He doubts Peggy's claim to have discovered the magic word.  He thinks, you know, he knows all the words that she knows.  And especially all that business with Wally, he's a bit more annoyed than ever with her.\r\n\r\nFor her part, Peggy is willing to work to convince Victor that she knows the magic word; but she insists upon doing it in a way that cannot also be used to prove it to anyone else.  Remember, that's part of our goal here is not being able to prove what is proven to Victor the verifier to anyone else.  And this is a problem, for whatever reason it's crucial because Peggy wants to keep this secret.  She's willing to prove it to Victor.  She doesn't want Victor to be able to go off and prove it elsewhere.  Remember, the formal requirements for zero-knowledge proofs are that, even if the verifier has been convinced of the truth of the prover's statement, the verifier should nevertheless be unable to prove the statement to any other third party.\r\n\r\nOkay.  So if Victor and Peggy were to simply stand at the cave's opening with the two tunnels heading off in opposite directions, clockwise and counter-clockwise around the ring, and if Peggy were to go down one path, say the magic words to the door, and then a few minutes later emerge from the other path, Victor would obviously be immediately convinced that Peggy had to have been able to open the door with the magic word because the only way she could have completely circumnavigated the ring tunnel would be if she were able to open and pass through the magic word door.\r\n\r\nBut if Victor were to record Peggy's accomplishment with his phone's video camera, or if someone other than Victor happened to also be standing there, too, watching Peggy do this, either of those would constitute incontrovertible proof of Peggy's grasp of magical cave door operation, and that would be unacceptable to her.  She refuses to do that.  She's willing to convince Victor, but, you know.  And, you know, she's stubborn.  We've already seen her use a large sheet of paper to frustrate Victor.  Peggy is pretty clever.  So she's come up with a way to prove to Victor - and Victor alone - that she can pass through that door at the far backside of the ring tunnel cave while at the same time preventing a video recording from creating solid evidence, or even evidence for someone standing by and silently observing the same thing that Victor observes.\r\n\r\nOnce again, Peggy and Victor stand at the mouth of the cave with the two tunnels diverging in opposite directions, inside the mountain.  Peggy has Victor turn around so that she is unobserved, and has him start counting down from 10.  She keeps her eye on him while she disappears from sight down the tunnel of her choosing.  Once Victor's count reaches zero, he turns around and shouts into the tunnel that he wants her to - and shouts, like, into both tunnels, the specific tunnel he wants her to emerge from.  If Peggy happened to go down that side of the ring, she simply retraces her path and comes out the side that Victor asked her to.  But if she went down the other side, she must use her magic word to open the door and emerge from the path Victor has requested.\r\n\r\nSo what do we know, and what does Victor know at this point?  What we know is that there's a 50/50 chance that Peggy may have initially gone down the same path that Victor asked her to return from.  So she would not have needed to use her magic word.  Victor knows that she got it correct once because he's only asked her once so far.  But of course that might have just been beginner's luck.  So they do it again.  As before, Victor turns his back, counts down from 10, which is what Peggy insists upon.  Peggy herself chooses a direction, gets to the door, and waits for Victor to shout out which path he wants her to return from.  Since Peggy does know the magic word, she is always able to succeed.\r\n\r\nBut if she did not know the magic word, and if they kept playing this game, the chances get greater and greater that Victor will ask her to return on the path opposite the one she went down, and Victor will have his, well, his victory of proving that she never did know the magic word after all.\r\n\r\nNow, we know how the statistics of this go; right?  One test is a 50/50.  Two tests, where both must be correct, assuming an equal probability of outcome, is one in four.  There's a one in four chance if Victor and Peggy do this twice, that Peggy could just get lucky, not know the word, but choose the right path both times.  There's a one in four chance of that.  Three tests reduces the probability to one in eight.  Four tests, one in 16.  Then we get to one in 32, 64, 128, 256, 512, 1024, 2048, 4096 and so on.\r\n\r\nTo get to 4096, one chance in 4096, that only requires 12 runs.  So if Peggy did not know the secret door-opening word, there would only be one chance in 4,096 of her being able to get the path correct all 12 times.  Before long, annoyed as he may be, Victor will give up and admit that Peggy must indeed be able to cross that door's threshold.  Either that, or she is incredibly lucky and just should go to Las Vegas.\r\n\r\nSo how has this statistical variation solved Peggy's concern about keeping her magical locksmith abilities unproven to anyone else?  Assuming that a camera or an observer were to turn around and be unable to see the path she took - which is the obvious requirement, just as she has required of Victor - there would be no way for a video recording or an on-the-spot observer to know that she and Victor were not conspiring by having pre-arranged the sequence of tunnels Victor would call out and Peggy would choose to go down and then return from.  They could have some system, like take a famous phrase, \"Ask not what you can do for your country,\" where a vowel in the letters of the words of that phrase means take the left tunnel, and a consonant in the words of that phrase means go down the right.  This would allow Victor and Peggy to stage the entire event for an audience, and gives Peggy the plausible deniability that she requires.\r\n\r\nAnd if confronted by someone who stood there or watched the video, she could ask, \"How gullible are you?  Victor and I simply prearranged the sequence of tunnels.  Why else do you imagine I didn't just let people directly observe which path I took?  It was so I could stage the whole thing.\"  So she has plausible deniability.  And you'll note that, assuming that she and Victor did not stage the entire thing, Victor would be unable to convince the observer that he and she did not stage it.  He has no way - he knows he was choosing paths at random.  But he has no way of proving the knowledge he now has that Peggy has the magic word to anybody else because only he knows that it was actually random.  Everybody else is saying, yeah, sure.  You know, we know you guys cheated somehow.\r\n\r\nThere are many other physical world constructions involving colored balls and decks of cards,  But anyway, everyone should by now have a good idea for what we're talking about.  There are clearly ways to prove some statement or assertion involving other conditions without disclosing any other information about those conditions. The proof can be made while leaking zero knowledge.\r\n\r\nAs an academic pursuit, a great deal of time and attention has been devoted to the formalization of Zero-Knowledge Proofs.  A zero-knowledge proof of some statement must satisfy three properties.  The property of completeness means, if the statement is true, then an honest verifier who is following the protocol properly will be convinced of this fact by an honest prover.  Then there's the statement of soundness.  If the statement is false, then no cheating prover, no matter what they do, can convince an honest verifier that it is true, except with some acceptably very small probability, like we saw with the cave.\r\n\r\nAnd thirdly, zero-knowledge.  If the statement is true, then no verifier learns anything other than the fact that the statement is true.  Peggy said Wally's there somewhere.  Victor said no, he's not.  I've looked everywhere.  You're making that up.  She showed him Wally through a little hole in the paper.  Victor's like, wow.  Okay?  You're right.  He's there.  But after she removes the paper, Victor still doesn't know where Wally is.  He's no wiser afterwards, but now he's really upset because he knows he's there somewhere, and he can't find him.  So if the statement is true, no verifier learns anything other than the fact that it's true. \r\n\r\nNow, in the case of our competitors, they only learned whether or not they had both purchased the same quantity of goods.  Yes or no?  And if not, they didn't learn anything about who was able to purchase more than the other.  And later finally with the cave, Victor was only ever able to convince himself that, despite himself trying all the words he could think of, Peggy must indeed know the magic cave door opening word.  And she was willing to prove it as many times as he needed her to prove it to him until he was convinced.\r\n\r\nThose first two properties - completeness and soundness - are generally true of many interactive proof systems.  They're not really anything special.  If the assertion is true, the prover will be able to convince an honest verifier of this.  If the assertion is false, it's not possible for a prover to fool the verifier into believing it's true.  But it's the third property, zero-knowledge, that the verifier is unable to learn anything other than the truth of the assertion that's where the magic happens and turns the proof into a ZKP.\r\n\r\nSo zero-knowledge proof technology is around, and it is currently in use for many privacy-centric purposes.  It's used anywhere it's necessary to prove an assertion, like the knowledge of a username and password, but without revealing anything about the username or password.  It may be eventually, you know, it may eventually lie at the heart of some future age verification system suitable for use by the Internet and elsewhere.  But as I started off saying at the top, I'm not holding my breath because a great deal of supporting infrastructure will be needed beyond just the zero-knowledge proof mechanics before we have anything that we can apply this technology to.\r\n\r\nBut anyway, the next time that you're at a cocktail party, if those are a thing any longer, and you're being annoyed by someone who's asking what you do, you can have some fun talking about Wally and magic caves and probably be left alone pretty quickly at the party.\r\n\r\nLEO:  Well, that was fun.  I feel like there should be some sort of mechanical way of generating zero-knowledge proofs, but I think you just have to think really hard; right?\r\n\r\nSTEVE:  Yup.\r\n\r\nLEO:  I like the box one.\r\n\r\nSTEVE:  Yeah.  Box one is neat.\r\n\r\nLEO:  I'm not crazy about the cave one, only because it depends on probability.\r\n\r\nSTEVE:  Correct.  Correct.  Yup.\r\n\r\nLEO:  So that to me is, well, I mean, it's pretty good.  The one about the sheet, she could have a second sheet that she put over the first sheet that had Wally, and then put the third sheet on top of the second sheet.  He wouldn't know.  So the box is the best one.  But still, I feel like there's something we should, I mean, it's good, I like these.  How would you apply that to age verification, do you think?  Is there a way?\r\n\r\nSTEVE:  I have no idea.\r\n\r\nLEO:  Let's think about that.  Write in to Steve.  And then if you want to get onto Steve's mailing list, or send an email, you've got to go to GRC.com/email.\r\n\r\nCopyright (c) 2025 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details:  https://creativecommons.org/licenses/by-nc-sa/2.5/.\r\n\r\n\r\n"
}
