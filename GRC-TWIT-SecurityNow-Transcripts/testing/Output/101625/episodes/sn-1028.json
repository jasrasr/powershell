{
  "Title": "Episode sn-1028",
  "Transcript": "C:\\Users\\jason.lamb\\OneDrive - middough\\Documents\\GitHub\\PowerShell\\GRC-TWIT-SecurityNow-Transcripts\\Downloads\\TXT-Transcriptions\\sn-1028.txt",
  "NotesPdf": null,
  "Tags": "RSA",
  "Preview": "GIBSON RESEARCH CORPORATION\t\thttps://www.GRC.com/\r\n\r\nSERIES:\t\tSecurity Now!\r\nEPISODE:\t#1028\r\nDATE:\t\tJune 3, 2025\r\nTITLE:\t\tAI Vulnerability Hunting\r\nHOSTS:\tSteve Gibson & Leo Laporte\r\nSOURCE:\thttps://media.grc.com/sn/sn-1028.mp3\r\nARCHIVE:\thttps://www.grc.com/securitynow.htm\r\n\r\nDESCRIPTION:  Pwn2Own 2025, Berlin results.  PayPal seeks a \"newly registered domains\" patent.  An expert iOS jailbreak developer gives up.  The rising abuse of SVG images via JavaScript.  Interesting feedback from our listeners.  Four classic science fiction movies not to miss.  How OpenAI's o3 model discovered a zero-day in the Linux kernel.\r\n\r\nSHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  A great program for you.  The results from Pwn2Own 2025.  Millions of dollars at stake.  The rising abuse of a graphics format that actually could really be problematic.  And how one hacker used OpenAI's models to find zero-day flaws, a technique that's definitely going to be on the rise.  All that and more...",
  "FullContent": "GIBSON RESEARCH CORPORATION\t\thttps://www.GRC.com/\r\n\r\nSERIES:\t\tSecurity Now!\r\nEPISODE:\t#1028\r\nDATE:\t\tJune 3, 2025\r\nTITLE:\t\tAI Vulnerability Hunting\r\nHOSTS:\tSteve Gibson & Leo Laporte\r\nSOURCE:\thttps://media.grc.com/sn/sn-1028.mp3\r\nARCHIVE:\thttps://www.grc.com/securitynow.htm\r\n\r\nDESCRIPTION:  Pwn2Own 2025, Berlin results.  PayPal seeks a \"newly registered domains\" patent.  An expert iOS jailbreak developer gives up.  The rising abuse of SVG images via JavaScript.  Interesting feedback from our listeners.  Four classic science fiction movies not to miss.  How OpenAI's o3 model discovered a zero-day in the Linux kernel.\r\n\r\nSHOW TEASE:  It's time for Security Now!.  Steve Gibson is here.  A great program for you.  The results from Pwn2Own 2025.  Millions of dollars at stake.  The rising abuse of a graphics format that actually could really be problematic.  And how one hacker used OpenAI's models to find zero-day flaws, a technique that's definitely going to be on the rise.  All that and more coming up next on Security Now!.\r\n\r\nLEO LAPORTE:  This is Security Now! with Steve Gibson, Episode 1028, recorded Tuesday, June 3rd, 2025:  AI Vulnerability Hunting.\r\n\r\nIt's time for Security Now!, woohoo!  The show celebrating insecurity since 1864.  No, the show where we cover your privacy, your security, how computers work, a little sci-fi, and some health news, too, with this guy right here, Steve Gibson of GRC.com.\r\n\r\nSTEVE GIBSON:  The things that interest us, basically.\r\n\r\nLEO:  Yeah.  Yeah.\r\n\r\nSTEVE:  But we stay on topic, so...\r\n\r\nLEO:  I like it being wide-ranging.  I think people enjoy all the - it's about your brains, and you have such good brains.  We want to dine on them.\r\n\r\nSTEVE:  Something, there is a little bit of sci-fi talk.  Somebody reminded me of a classic sci-fi movie, and then that of course caused me to think of the three other classic sci-fi movies.  And by \"classic\" I mean 1955, 1956, 1970.  They're movies that everybody knows.  But if you don't, then you have an assignment.\r\n\r\nLEO:  Oh, good.\r\n\r\nSTEVE:  Because, I mean, these things, like, you know, like those of us who know, know about the Krell, and know about Monsters from the ID, and know about...\r\n\r\nLEO:  Folks, these are terrible movies.\r\n\r\nSTEVE:  Oh, they're fantastic movies.  Oh, my goodness.\r\n\r\nLEO:  They're cheesy.  I mean, if you take it in the right spirit, I guess it's fun to watch them.  I mean, they're not like - it's not like \"2001:  A Space Odyssey.\"\r\n\r\nSTEVE:  Way better.\r\n\r\nLEO:  Okay.\r\n\r\nSTEVE:  No.\r\n\r\nLEO:  Okay.  Stay tuned.  You're going to learn what Steve's picks are.\r\n\r\nSTEVE:  And we will be talking about that.  But as I promised last week, because we tackled a big topic, there were some things I didn't get to.  We're getting to them this week.  We're going to talk about the Pwn2Own 2025 hacking competition.\r\n\r\nLEO:  Love that.\r\n\r\nSTEVE:  Which for the first time was held in Berlin.  We've got the results from that a couple weeks ago.  PayPal seeking a newly registered domains patent, which I think is very clever, but I worry that they're patenting it because they shouldn't.  We've got a really cool inside look at a long-term expert iOS jailbreaker who has given up, and we're going to look at why.  Also the rising abuse of SVG, Scalable Vector Graphic images, and who put this spec together and why, because it's insane.  We've got some interesting feedback from our listeners.  As I said, I will touch on, and Leo and I will discuss our varying views...\r\n\r\nLEO:  Yes.\r\n\r\nSTEVE:  ...on a couple of classic sci-fi movies that are just - I think are fantastic.  But then we're going to take a deep dive into how OpenAI's o3 model discovered a previously unknown, remotely executable zero-day exploit in the Linux kernel.\r\n\r\nLEO:  Oh, my goodness.\r\n\r\nSTEVE:  And what this means for AI Vulnerability Hunting, which is the title of today's podcast.\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  So it's a guy who did this, I mean, he understands AI.  He's been interested in vulnerability hunting and development.  He, well, I don't want to step on the news, but it's a really, really, really interesting story.  And of course we have a Picture of the Week that is one for the history books.\r\n\r\nLEO:  That I haven't seen.\r\n\r\nSTEVE:  I think everyone is going to get a big kick out of it, so...\r\n\r\nLEO:  Yeah, if the good guys can discover vulnerabilities with AI, so can the bad guys. \r\n\r\nSTEVE:  And I do make the point that, if the AI is used before the release of the software, then there won't be vulnerabilities for the bad guys to find.\r\n\r\nLEO:  That's a good thing.  Good point.\r\n\r\nSTEVE:  So I realized, for a while I was thinking, oh, this is bad, I mean, that there's a symmetry here.  But no, actually, because you don't have to let it go until...\r\n\r\nLEO:  That's right.  Do it first, yeah.\r\n\r\nSTEVE:  ...until the AI's had a chance to go through it.  So, yeah.  I think...\r\n\r\nLEO:  I've been using Claude code in AI to write tests, which I think is a really good use of AI because it's an independent eye looking at your code.\r\n\r\nSTEVE:  That's exactly what I was going to say, yes.\r\n\r\nLEO:  Yeah, yeah.\r\n\r\nSTEVE:  I mean, the reason I don't test my own code, I've got a whole bunch of neat guys who are pounding on it, is I can't.  I know how it works.\r\n\r\nLEO:  Right.  You're not objective.\r\n\r\nSTEVE:  I don't press the button at the wrong time.\r\n\r\nLEO:  I don't want to cause a race condition or anything.\r\n\r\nSTEVE:  Some other guy presses, I go, \"Why did you do that?\"  Well, it was there.  Oh.\r\n\r\nLEO:  In the middle of a - oh, my god.\r\n\r\nSTEVE:  You started off talking about email, which reminded me of something that I wanted to say.\r\n\r\nLEO:  Yes.\r\n\r\nSTEVE:  Yesterday evening, 17,568 pieces of Security Now! email...\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  ...well, attempted to go out.\r\n\r\nLEO:  Oh.\r\n\r\nSTEVE:  I looked a little bit later, and 650-some had bounced.\r\n\r\nLEO:  Oh.\r\n\r\nSTEVE:  Which never happens.\r\n\r\nLEO:  That's a low bounce rate.  That's not terrible.\r\n\r\nSTEVE:  Well, it's normally five because the system's working really well and so forth.  Anyway, I thought, what the what?, as you would say.  And I checked.  For a reason I have no explanation for, Yahoo decided that we were a bad...\r\n\r\nLEO:  They started blocking you.\r\n\r\nSTEVE:  ...email server.  So some Cox, because of course, you know, Cox sold themselves to Yahoo.  So there were some Cox.  But mostly - so I just wanted to let our listeners know, I'm sorry if you're a Yahoo email subscriber, and you did not receive the Security Now! show notes.  I tried to send them.  You know...\r\n\r\nLEO:  Your ISP wouldn't let me.\r\n\r\nSTEVE:  17,000 other people got the show notes.\r\n\r\nLEO:  Well, I know because last night Lisa said, oh, Steve's working hard.  She got the email.  And, now, I get it, but I don't look at it.\r\n\r\nSTEVE:  That's right.\r\n\r\nLEO:  Because I don't want to see the Picture of the Week.\r\n\r\nSTEVE:  No, don't want to spoil the surprise.  And Leo, I have to say, this one, there could only have been one caption for this picture.  I gave this picture the caption:  \"If the U.S. power grid collapses, it might not be China's fault.\"\r\n\r\nLEO:  Oh.  I love these fun with power pictures.  Let me scroll up because I haven't seen it yet.\r\n\r\nSTEVE:  If the U.S. power grid collapses, it might not be China's fault.\r\n\r\nLEO:  Oh, my god.  That's an interesting way to make a splice.  Do you think that would - I guess it would work.\r\n\r\nSTEVE:  Well, as long as you don't have a windstorm or something.  Now, I...\r\n\r\nLEO:  Maybe a little electrical tape around it, just, you know, just for extra support.\r\n\r\nSTEVE:  Presumably this person, the lineman who did this splice intended to come back soon.  We don't really know anything about the story here.\r\n\r\nLEO:  You know what I like, though?  He was careful to trim the tails of the zip ties.\r\n\r\nSTEVE:  Oh, yeah.\r\n\r\nLEO:  Because you don't want any...\r\n\r\nSTEVE:  And we've got two zip ties.\r\n\r\nLEO:  Oh, there's another one?  Oh, look.\r\n\r\nSTEVE:  One person - no, no, I meant there are two up there on the main splice.\r\n\r\nLEO:  Oh, yeah, yeah, yeah.\r\n\r\nSTEVE:  Yeah, yeah.\r\n\r\nLEO:  Well, that's double protection, yes.\r\n\r\nSTEVE:  Yeah, that's right.  Because, you know, one tie wrap's not good enough.  You need to do two, yeah.\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  So those who aren't able to see...\r\n\r\nLEO:  So using zip ties - no, go on, you describe it, yeah, yeah.\r\n\r\nSTEVE:  For someone who is unable to see this, we have a power line.  We can tell because it's sort of in the background is a telephone pole, you know, a power pole with power lines, a house in the background.  You hope that they've got their fire insurance paid up.  And a naked bare splice of two cables where about maybe an inch and a half of each of the cables, the rubber insulation has been cut off, and they're put next to each other and then held in place with a pair of white plastic zip ties  So, now, I actually think that these may be ground wires.  And so they're less...\r\n\r\nLEO:  Oh, that wouldn't be too bad.\r\n\r\nSTEVE:  They're less, it's less of a concern than you might otherwise think.  But, boy, there's really no excuse for something that is certainly slipshod at best.\r\n\r\nLEO:  Well, if anybody's ever used zip ties, I mean, that could slip out easily, and it's not protected from the rain, and I...\r\n\r\nSTEVE:  Yeah.  And there's nothing to prevent either side being pulled on, as you said.\r\n\r\nLEO:  Right.\r\n\r\nSTEVE:  It's just going to slide right out.\r\n\r\nLEO:  Right.  That's hysterical.\r\n\r\nSTEVE:  So anyway, I got a kick out of \"If the U.S. power grid collapses, it might not be China's...\"\r\n\r\nLEO:  It's all held together with spit and chewing gum.\r\n\r\nSTEVE:  Might be Moe.\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  Yeah.  Okay.  So last week I promised to catch us up with the results from the recent Pwn2Own hacking competition, which as I mentioned was held for the first time in Berlin.  In their announcement of this before the event, Trend Micro, the organizer of this now 18-year-old competitive hacking series, which we've been following for the entire 20 years of this podcast, they wrote:  \"While the Pwn2Own competition started in Vancouver in 2007, we always want to ensure we are reaching the right people with our choice of venue.  Over the last few years, the OffensiveCon conference in Berlin has emerged as one of the best offensive-focused events of the year.  And while CanSecWest has been a great host over the years\" - and our longtime listeners will remember, that's where we've talked of it being held in the past, CanSecWest - \"it became apparent that perhaps it was time to relocate our spring event to a new home.\r\n\r\n\"With that, we're happy to announce that the enterprise-focused Pwn2Own event will take place on May 15-17, 2025, at the OffensiveCon conference in Berlin, Germany.  While this event is currently sold out, we do have tickets available for competitors, and we believe the conference will also open a few more tickets for the public, too.  The conference sold out its first run of tickets in under six hours, so it should be a fantastic crowd of some of the best vulnerability researchers in the world.\"\r\n\r\nOkay, so now, that was two and a half weeks ago.  What happened?  Before I run through what happened, I want to remind everyone the context of what we're going to hear.  These are the results when today's upper-echelon most skilled penetration hackers go up against fully patched systems.  What always strikes me is that the targets here are not old junk routers past their end-of-life that the FBI says everybody should stop using, or should have years ago.  In every case, these targets, what these guys are successfully cracking open, are fully patched modern systems.  But, like, what we're all using right now.  So for me this serves as a reminder that, to a large extent, the only reason - this is also why my model for security is unfortunately Swiss cheese or a sponge.\r\n\r\nTo a large extent the only reason we have any appearance of security is that none of these most skilled hackers want to attack us because all the evidence suggests they could get in if we let them at our system.  Hopefully these are not - most of these are local attacks on systems, not remote code exploits.  So thank goodness for that.\r\n\r\nSo here's what happened two and a half weeks ago in Berlin.  I'm just going to, to keep this short, I'm going to run through the list of things that happened.  There's absolutely no chance that I could pronounce any of the names of these people, so I apologize.  I'm just going to talk about the teams that they're in because the names of their organizations are pronounceable.  I just didn't want to mangle their names so badly.  So here's what happened.  In chronological order - it was a three-day event.  So we've got three days of this.\r\n\r\nFirst, DEVCORE's Research Team used an integer overflow to escalate their privileges on Red Hat Linux, earning $20,000 and 2 Master of Pwn points.  In other words, this was somebody who sat down at today's fully patched Red Hat Linux and got root, even though, I mean, endless effort has gone into making that not be possible.  Whoops.\r\n\r\nSecond, although the Summoning Team successfully demonstrated an exploit of NVIDIA Triton, the bug that they used, that they discovered independently, was also known to NVIDIA, but NVIDIA had not yet patched it.  So that still qualifies because these guys independently discovered a bug that was in the public space.  So anybody's fully patched NVIDIA systems would have succumbed.  That earned them $15,000 and 1.5 Master of Pwn points.\r\n\r\nSTAR Labs SG combined a Use After Free.  They used the initials UAF.  And Use After Free is significant.  We're going to run across this a couple times.  Unfortunately, I'm going to actually be talking about it in depth before I go into a great deal of detail at the end of the podcast.  So things are - in fact, I'm using it before I describe it, as opposed to using it after freeing it.  So these guys, STAR Labs SG, combined a Use After Free and an integer overflow to escalate to SYSTEM level on Windows 11.  That got them $30,000 and 3 Master of Pwn points.\r\n\r\nResearchers from Theori were able to escalate to root on Red Hat Linux using a different hack with an info leak and a Use After Free.  One of the bugs used was an N-day, meaning that it was known to the world, but not to them at the time.  But they got  $15,000 and 1.5 Master of Pwn points.\r\n\r\nThe first-ever winner of the AI category - I forgot to mention that this was - I mentioned it last week.  This is the first time that artificial intelligence was considered in scope for the Pwn2Own conference.  So the first-ever winner in the AI category was the Summoning Team.  They successfully exploited Chroma to earn $20,000 and 2 Master of Pwn points.\r\n\r\nIn a surprise to no one, the conference holders wrote that Marcin Wiazowski's privilege escalation on Windows 11 was confirmed.  He used an Out-of-Bounds Write to obtain system privileges and also obtain $30,000 for himself, and 3 Master of Pwn points.\r\n\r\nTheir enthusiasm was rewarded as Team Prison Break, they were the Best of the Best 13th, used an integer overflow to escape Oracle's VirtualBox VM and execute code on the underlying OS.  Again, fully patched, you know, like as current as you could have it be.  And they broke out of the VM why?  Because they wanted to.\r\n\r\nLEO:  Because they could.\r\n\r\nSTEVE:  Because for them, okay, fine.  You think you can contain us?\r\n\r\nLEO:  Well, there's another reason they did it.  How much did they make out of that?\r\n\r\nSTEVE:  $40,000 and 4 Master of Pwn points.  So yes, they had motivation.  And we'll be talking about motivation here in a minute.  That's a perfect lead-in, Leo. \r\n\r\nViettel Cyber Security targeting NVIDIA Triton Inference Server successfully demonstrated their exploit.  It was, again, NVIDIA must be a little slow in getting their updates out because, again, this is NVIDIA, and it was known to the vendor though had not yet been patched.  They earned $15,000 and 1.5 Master of Pwn Points.\r\n\r\nA researcher from Out Of Bounds earned $15,000 for a third round and 3 Master of Pwn Points by successfully using a type confusion bug to escalate privileges on Windows 11.\r\n\r\nSTAR Labs used a Use After Free to perform their Docker Desktop escape and execute code on the underlying OS, so broke right out of Docker's Containment and earned themselves $60,000 and 6 Master of Pwn Points.\r\n\r\nLEO:  Whoa.  Breaking out of VMs or Dockers seems to be the big moneymaker; right?\r\n\r\nSTEVE:  Yeah.  Well, because that's a cloud attack.  I mean, everything in the cloud is VMs and containment.  And so you can get to the underlying VM in a cloud environment.  That's golden.  And that was just day one.\r\n\r\nFuzzingLabs exploited NVIDIA's Triton.  The exploit they used was also known to the vendor.  Again, Nvidia, get with the program here.  Get these patches out.  But that still earned them $15,000.\r\n\r\nViettel Cyber Security combined an auth bypass and an insecure deserialization bug to exploit Microsoft SharePoint, earning $100,000 and 10 Master of Pwn points.\r\n\r\nSTAR Labs SG was back with a single integer overflow to exploit VMware's ESXi, the first in Pwn2Own history, earning them $150,000 and 15 Master of Pwn points.  As you said, Leo, breaking out of VMs and containment, that's where the money is.  And this is an enterprise-focused competition, so that's why we're seeing VirtualBox and VMware, ESXi and so forth.\r\n\r\nPalo Alto Networks researchers used an Out-of-Bounds Write to exploit Mozilla Firefox to earn $50,000 and 5 Master of Pwn points.\r\n\r\nThe second win in the AI category goes to the team from Wiz Research who leveraged a Use After Free to exploit Redis, earning $40,000 and 4 Master of Pwn points.\r\n\r\nIn the first full win against NVIDIA Triton Inference server, researchers from Qrious Secure used a four-bug chain to exploit NVIDIA's Triton.  Their unique work earned them $30,000 and 3 Master of Pwn points.\r\n\r\nLEO:  NVIDIA said, oh, we didn't know about that one.\r\n\r\nSTEVE:  There's one we didn't know.  And if we did, we wouldn't have patched it anyway.\r\n\r\nLEO:  Yeah, right.\r\n\r\nSTEVE:  Idiots.  Viettel Cyber Security used an Out-Of-Bounds Write for their Guest-to-Host escape on Oracle VirtualBox.  That got them $40,000.\r\n\r\nAnother researcher from STAR Labs SG used a Use After Free bug to escalate privileges on Red Hat Enterprise Linux.  That earned them $10,000.\r\n\r\nAlthough Angelboy from DEVCORE Research Team successfully demonstrated their privilege escalation on Windows 11, one of the two bugs used was known to Microsoft.  Nevertheless, that guy got $11,250.\r\n\r\nAlthough the team from FPT NightWolf successfully exploited NVIDIA's Triton, the bug once again they used was known to NVIDIA, but had not yet been patched.  Still, $15,000 richer as a result.\r\n\r\nFormer Master of Pwn winner Manfred Paul used an integer overflow to exploit Mozilla Firefox's renderer.  His excellent work earned him $50,000.\r\n\r\nWiz Researchers used a External Initialization of Trusted Variables bug to exploit the NVIDIA Container Toolkit.\r\n\r\nSTAR Labs researchers used a TOCTOU, that's a Time of Check/Time of Use race condition to escape the Virtual Machine and an Improper Validation of Array Index for the Windows privilege escalation.  So they got out of a Windows VM and then escalated their privileges to full admin, earning them $70,000 and 9 Master of Pwn points.\r\n\r\nReverse Tactics used a pair of bugs to exploit ESXi, but the Use of the Uninitialized Variable bug collided with a previous entry.  Nevertheless, the integer overflow was unique and earned them $112,500 and 11.5 Master of Pwn points.\r\n\r\nWe have two left.  Two researchers from Synacktiv used a heap-based buffer overflow to exploit VMware Workstation.  That got them $80,000.\r\n\r\nAnd in the final attempt of Pwn2Own Berlin 2025, Milos Ivanovic used a race condition bug to escalate privileges to system, which is to say admin, on Windows 11.  His fourth-round win netted him $15,000 and 3 Master of Pwn points.\r\n\r\nLEO:  I would like to watch this.  It would be so, I mean...\r\n\r\nSTEVE:  It is.  And that's why it sold out in six hours, Leo.\r\n\r\nLEO:  Oh, wow.\r\n\r\nSTEVE:  They put the tickets online, bang.  Gone.  You know, we want to sit there because it is all done live onstage with the guys and their laptops, you know, sweating over the keyboard, hoping that their exploit's going to work.\r\n\r\nThere were a total of 26 individual exploits demonstrated.  While some of them were known to their respective vendors, largely NVIDIA, in every one of those cases patches for them had not yet been made public, so they still qualified as new independent discoveries.\r\n\r\nTrend Micro summed up the event, writing:  \"And we're finished!  What an amazing three days of research.  We awarded an event total of $1,078,750.\"\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  They said:  \"Congratulations to the STAR Labs SG team for winning Master of Pwn.  They took home $320,000 and 35 Master of Pwn points.  During the event,\" they wrote, \"we purchased from the researchers, and disclosed to their respective vendors, 28 unique zero-days.\"\r\n\r\nLEO:  Wow.\r\n\r\nSTEVE:  \"Seven of which came from the AI category.  Thanks to OffensiveCon for hosting the event, the participants for bringing their amazing research, and the vendors for acting on the bugs quickly.\"  Except in the case of NVIDIA.\r\n\r\nLEO:  Although our chat's saying that many of the things you just described have been patched most recently, like Ubuntu just did a bunch of patches.\r\n\r\nSTEVE:  No, that's exactly what happens here is that Trend Micro is, thanks to sponsors of the event, and there are many enterprise-level sponsors who provide the money to back this, Trend Micro - so this is like a bug bounty, sort of like a live bug bounty event.\r\n\r\nLEO:  Right, right.\r\n\r\nSTEVE:  And of course they do run, Trend Micro runs the zero-day.  ZDI is the bug bounty program.  So this is sort of like that, you know, the bug bounty in real-time as a conference format.  So they're buying these exploits from the guys who find them, and then immediately turn around and report them to the vendors and say, uh, by the way, Microsoft, we have three new zero-days in Windows 11 that allow people just to cut through all your security.  Microsoft goes, oh, well, we'll get around to fixing it next week.\r\n\r\nLEO:  But I wonder if the companies that benefit from this, like Microsoft and NVIDIA...\r\n\r\nSTEVE:  They are sponsors.\r\n\r\nLEO:  They are, yeah, okay.\r\n\r\nSTEVE:  Yeah.\r\n\r\nLEO:  So some of that money's coming from them.\r\n\r\nSTEVE:  Yes.\r\n\r\nLEO:  I mean, this is - they want this to happen.\r\n\r\nSTEVE:  Yeah, they are corporate sponsors.  And, you know, it occurs to me as I was running through this, first of all, again, now that everyone has a taste for this, think about that.  These are, you know, these are the best of the best.  That is said.  But it just says that here we're talking about, you know, Docker containers and VMware ESXi, which is state-of-the-art virtual machine containment.  And these guys, go, eh.  You know?\r\n\r\nLEO:  Well.  Well, they're pretty good.\r\n\r\nSTEVE:  They are.  They are good.\r\n\r\nLEO:  And, you know, of course they work all year and save these up because they want to make this money, you know.\r\n\r\nSTEVE:  I was listening to you guys talking about code authoring on MacBreak Weekly before the podcast.\r\n\r\nLEO:  Bytecoding, yeah.\r\n\r\nSTEVE:  Yes, bytecoding.  And one thing occurred to me, and that is that what I heard was, for example, in the case of Alex and Andy, who are not, you know, real, like, aren't themselves code authors, they are now using AI to create apps, to interact with the AI to create apps.  We've talked in the past on the bug bounty side about the possibility of our listeners generating some extra revenue on the side if they were to find vulnerabilities.\r\n\r\nWell, today's podcast is AI Vulnerability Hunting.  And it's an interesting possibility that there may be people listening who are not at this level, who, you know, and would never say that they were, at the level of Pwn2Own competition winners, but who may well be able to work with various large language models and systems which are offered, for which bug bounties are offered, and use AI to help them find some problems that they would - some bugs that they wouldn't otherwise find and generate some revenue.  So you don't know until you look.\r\n\r\nLEO:  Yeah.  And you want these guys working white hat, not black hat, obviously.\r\n\r\nSTEVE:  Yes.\r\n\r\nLEO:  They're good.\r\n\r\nSTEVE:  Yes.\r\n\r\nLEO:  Yes.  Give them a reason to...\r\n\r\nSTEVE:  Boy.  But it just goes to show, again, that like here are all these mainstream, actively maintained - except in the case of NVIDIA - products that are, you know, hackers sit down and say, I want to find a way in.  And they can.\r\n\r\nLEO:  I imagine you get more points for a more difficult task.\r\n\r\nSTEVE:  Yes, yes.  Well, and more cringeworthy.  I mean, if you're breaking out of ESXi VM, that's worth a lot of money.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  And also understand, too, that was it Zerodium that are the bad guys?\r\n\r\nLEO:  Yeah, yeah.\r\n\r\nSTEVE:  That are buying these bugs?\r\n\r\nLEO:  Yeah, yeah.  Yeah, yeah.\r\n\r\nSTEVE:  You could sell that to Zerodium for a ton...\r\n\r\nLEO:  For a million.\r\n\r\nSTEVE:  ...of money.\r\n\r\nLEO:  Yeah, yeah.  Yeah, they know they're taking a cut in pay to be good guys.\r\n\r\nSTEVE:  Yeah.\r\n\r\nLEO:  What an interesting - I love this, yeah.\r\n\r\nSTEVE:  And speaking of a cut in pay.\r\n\r\nLEO:  Would you like a boost?\r\n\r\nSTEVE:  We're half an hour in.\r\n\r\nLEO:  A little something extra?\r\n\r\nSTEVE:  I need to re-up my caffeine level.\r\n\r\nLEO:  For your coffee?\r\n\r\nSTEVE:  We can all tell that I'm a little low energy at the moment.\r\n\r\nLEO:  Mr. Now-Fully-Caffeinated Steve Gibson.  Are you ever fully caffeinated, Steve, really?\r\n\r\nSTEVE:  Yeah.  There have been times when I dare not have any more.\r\n\r\nLEO:  Over-caffeinated.\r\n\r\nSTEVE:  Over-caffeinated.  Okay.  So the online publication Domain Name Wire posted some interesting news under the headline \"PayPal wants patent for system that scans newly registered domains,\" with the subheading \"Patent describes automated crawler and checkout simulator to spot fraud in newly registered domains.\"  And I just think this is extremely clever.\r\n\r\nThe publication then explained:  \"PayPal filed a patent application back at the end of November 2023.\"  Okay, so, again, a year and a half.  \"It was just published last Thursday, May 29th.  The patent application describes a method to proactively detect scam websites - which have historically created a problem for PayPal - by automatically examining newly registered domains\" - that's just so clever - \"and simulating checkout processes.\"\r\n\r\nLEO:  Oh, wow.\r\n\r\nSTEVE:  Isn't that neat?  \"The U.S. patent application 18/521,909, titled 'Automated Domain Crawler and Checkout Simulator for Proactive and Real-time Scam Website Detection,' describes a system designed to tackle online fraud at its earliest stages.  According to the application, PayPal's system monitors newly registered domains to identify those that include checkout options.  The technology then performs simulated checkout operations on these sites, mimicking a genuine user's experience.  This simulation specifically looks for domain redirections during checkout processes because this is a common tactic scammers use to conceal fraudulent activity.\r\n\r\n\"If a redirection occurs, PayPal's system checks the redirected domain against its database of known scam merchants and flagged accounts.  Domains linked to previous fraudulent activities trigger a scam alert, allowing PayPal to promptly label and potentially block transactions from these websites.  PayPal notes that scammers often set up new, seemingly legitimate websites to mask their operations.  By proactively identifying suspicious redirections and cross-referencing them against scam-related merchant accounts, the method allows it to significantly reduce that risk.\"\r\n\r\nWhich, again, this is - it's just brilliant.  It's like one of those \"why didn't I think of that\" kind of things.  But my first thought upon reading this was that while, you know, it is a very cool and clever idea, it feels wrong to issue a patent for this.  I mean, or I don't know, it makes me a little nervous since the idea's use really should remain freely available for any similar service that is subject to this sort of abuse to employ.\r\n\r\nLEO:  I don't think they can patent it because there's lots of prior art.  We talked last week about NextDNS, which we both use as a DNS server; right?\r\n\r\nSTEVE:  Right.\r\n\r\nLEO:  On their security page, and I have it turned on, I know - I'll tell you how I know.  They have a switch that says \"Block newly registered domains, domains less than 30 days ago known to be favored by threat actors.\"  This has been around forever.  And the reason I know about this, my daughter created a new store, online store, and she wanted me to check it, and I couldn't get to it.  I for the longest time thought, oh, it's broken, it's broken.  And then I realized, oh, wait a minute, when did you register that domain?  She said, \"Last week.\"  I said, okay.  It works.  It really works.  But PayPal didn't invent this, I guess is the point.\r\n\r\nSTEVE:  Well, they're going further, though.\r\n\r\nLEO:  They could patent that process, sure, yeah.\r\n\r\nSTEVE:  Yeah.  What they're trying to patent is the notion of proactively examining the site, the actual content of the site, simulating a purchase event, and then watching to see what happens with that purchase event.  And my concern is that this ought to be in, I mean...\r\n\r\nLEO:  Sure.\r\n\r\nSTEVE:  This ought to be in the public for the public good.  Now, it is true that not all patents are obtained for competitive advantage and used to prevent competitors from using the invention.  It might be, and this would be great if it were true, that PayPal is being civic-minded and desires to obtain the patent preemptively to prevent anyone else from patenting what I think is a very clever and useful solution.  And then they might prevent PayPal from doing the same.  So let's hope that, if this automated, you know, newly registered domain scrutiny concept were to become commonplace, that PayPal would not prevent other commercial entities from availing themselves of similar solutions because this is, you know, clearly a good idea.\r\n\r\nAnd what is really cool is that, if this became pervasive, then basically it would shut this down as something that scam sites could get away with doing because, you know, registering domains is not expensive, but it's not free.  And if it stopped working enough to justify them going through all this effort, they would just, you know, give that up.  Generally, as security is increasing, we're seeing things that used to work no longer working for the bad guys.  And so they sort of say, okay, fine, well, we'll go try to make money maliciously somehow else.  Anyway, very cool patent, and I thought a very clever new idea.\r\n\r\nOkay.  I ran across an important story that I wanted to share because it comes from an extremely unlikely source, a true and unabashed vulnerability exploit developer and hacker who has been fixated upon Apple and iOS for years, and who has been right in the thick of things.  The story is important because from this person, who has the deepest of adversarial knowledge and understanding of iOS, we learn why, as he puts it, about kernel exploitation, and we'll get to his quote a little bit later.  But he said:  \"Those days are evidently long gone\" - meaning successful exploitation, he said - \"with the iOS 19 beta being mere weeks away and there being no public kernel exploit for iOS 18 or 17 whatsoever.\"  In other words, Apple quietly changed the world.\r\n\r\nSince this was no easy feat, I'm sure this is known and appreciated among those at Apple who made this happen, as well as those in the exploit community whose many tricks no longer work.  But it's not something, this is not something that I think has ever really been made or has come completely clear to the rest of the world because you really need to get down in the weeds to understand this because this is where these sorts of changes need to happen.  Anyway, they did happen.\r\n\r\nSo, okay, now, part of the problem I have with sharing this is that, because what Apple did really is down in the weeds, that's where we have to go in order to get a really deep understanding.  But as I was absorbing - this hacker's name is Siguza, (S-I-G-U-Z-A).  He's Swiss.  As I was absorbing what he wrote and explained, I was thinking, okay, by the end of this podcast our listeners are going to have enough of an understanding about what it means to double-free a kernel object to have this make more sense.  But it turns out that...\r\n\r\nLEO:  I have no idea what that means.\r\n\r\nSTEVE:  I know.  But I'm actually going to be talking about it at the end of the podcast.\r\n\r\nLEO:  Oh, good.\r\n\r\nSTEVE:  And as I was putting this together, I had already written the end.  So I knew that I was going to be explaining what this stuff was.\r\n\r\nLEO:  Oh, that's funny.\r\n\r\nSTEVE:  Except that now I'm talking about it before I've explained it.  So as I said, things are a little ordered upside down here.  But, you know, the AI Vulnerability Hunting really does need to be our main topic, and I like having it at the end.  Anyway, I'm going to share enough of this that everyone's going to get a good sense for what Apple has done.  But at some point you're just going to have to let kind of some of the details wash over you and not worry about the details.\r\n\r\nSo I'm going to settle for sharing enough of Siguza's nontechnical backgrounding for everyone, as I said, to get a real good sense for the environment that this hacker had historically been swimming through and for how he now observes that has totally changed.  Apple has totally changed the game.  And this sort of happened without anyone really, I mean, you know, WWDC happens every year.  It's, what, next Monday; right, Leo?  And you guys are going to be covering it.\r\n\r\nLEO:  It is.  We're going to stream the keynotes, yeah.\r\n\r\nSTEVE:  And five years ago, just five years ago, in 2020, everything was different from the way it is today.  So he wrote:  \"I'm an iOS hacker/security researcher from Switzerland.  I spend my time reverse engineering Apple's code, tearing apart security mitigations, writing exploits for vulnerabilities, or building tools that help me with that.  Sometimes I speak about it at conferences, sometimes I do lengthy blog posts with all the technical details, sometimes my work becomes part of a jailbreak, and sometimes it never sees the light of day.\"\r\n\r\nOkay.  Two weeks ago he wrote a blog posting titled \"tachy0n: The last zero-day jailbreak.\"  It starts off, he said:  \"Hey.  Long time no see, huh?  People have speculated over the years that someone 'bought my silence,' or asked me whether I had moved my blog posts to some other place, but no.  Life just got in the way.  This is not the blog post which I planned to return to\" - or return with he probably means - \"but it's the one for which all the research is said and done, so that's what you're getting.  I have plenty more that I want to do, but I'll be happy if I can even manage to put out two blogs a year.\"\r\n\r\nHe said:  \"Now, tachy0n.  tachy0n is an old exploit, for iOS 13.0 through 13.5, released in unc0ver [where unc0 is a numeric 0, ver].\"  And in fact if you go to - if you put unc0ver.dev, what you will find there is a jailbreaking kit because that's where a lot of this guy's work goes.  He's one of the guys who was always figuring out how to jailbreak iOS.  And he said:  \"...was released in unc0ver,\" that is, this tachy0n exploit, \"v5.0.0 on May 23rd, 2020, exactly five years ago.\"  So this is his five-year anniversary of the tachy0n exploit.\r\n\r\nOkay.  So anyway, I'm going to interrupt here to remind everyone that once upon a time end-user jailbreaking was a thing.  It was common.  Mostly it was for people wanting to make unauthorized changes or customizations to their devices, to run unsigned code or sideloading apps, to get apps installed not from the App Store, or just to have the freedom of digging around in their iOS or Android device's innards.  In this case, it's all Apple and iOS with this guy.  So this Swiss Siguza hacker was one of the unc0ver developers.  In fact, he contributed to a number of other jailbreaking products, as we'll see.  So, and unc0ver describes itself as \"The most advanced jailbreak tool.\"  And on the home page it says \"iOS 11.0-14.8.\"\r\n\r\nUnc0ver is now at version 8.0.2, and under \"What's New\" it notes:  \"Add exploit guidance to improve [this version 8.0.2] added exploit guidance to improve reliability on A12-A13 iPhones running iOS 14.6-14.8 and Fix exploit reliability on iPhone XS devices running iOS 14.6-14.8.\"  And then under the \"About unc0ver\" they write: \"unc0ver is a jailbreak, which means that you can have the freedom to do whatever you would like to do to your iOS device.  Allowing you to change what you want, operate within your purview, unc0ver unlocks the true power of your iDevice.\"\r\n\r\nThen lower down on the homepage they also remind us under \"Jailbreak Legality\" that \"It is also important to note that iOS jailbreaking is exempt and legal under DMCA.  Any installed jailbreak software can be uninstalled by re-jailbreaking with the restore rootfs option to take Apple's service for an iPhone, iPad, or iPod touch that was previously jailbroken.\"\r\n\r\nOkay.  So now back to Siguza, as I said, one of the guys behind this unc0ver jailbreak, as well as some others, where he's explaining about tachy0n.  He says of tachy0n:  \"It was a fairly standard kernel LPE (Local Privilege Escalation) for the time.  But one thing that made it noteworthy is that it was dropped as a zero-day, affecting the latest iOS version at the time, leading Apple to release a patch for just this bug a week later.\"\r\n\r\nSo, you know, so this was - and remember, this was just five years ago.  He also comments later, looking back now, how much the world has changed in five years, where he describes tachy0n as \"a fairly standard kernel local privilege escalation,\" like that's just what we did back then.  So the work that these guys were doing were the sorts of things that was causing Apple to respond immediately.  And of course we know why our iDevices were having to update themselves and restart so often back then.  He says:  \"This is something that used to be common a decade ago, but has become extremely rare - so rare, in fact, that it has never happened again after this.\r\n\r\n\"Another thing,\" he writes, \"that made it noteworthy is that, despite having been a zero-day on iOS 13.5, it had actually been exploited before by me and friends, but as a one-day at the time.  And that's where this whole story starts.\"  He says:  \"In early 2020, Pwn20wnd\" - that's P-W-N-2-0-W-N-D - \"a jailbreak author, not to be confused with Pwn2Own, the event).\"  So this person whose handle is Pwn20wnd, he said, \"contacted me, saying he had found a zero-day reachable from the app sandbox\" - meaning any app running on iOS could break out of the app containment, which is very valuable - \"and was asking whether I'd be willing to write an exploit for it.\r\n\r\n\"At the time I had been working on checkra1n (C-H-E-C-K-R-A-1-N)\" - and Leo, it's interesting.  If you look at the checkra1n site, it's checkra.in.  The logo will immediately be familiar.  We of course talked about this at the time.  We were covering all these things back in the day, as they say.  Remember that logo on the site?\r\n\r\nLEO:  Yeah, yeah.  The chess pieces, yeah.\r\n\r\nSTEVE:  Yup.  He said:  \"At the time I'd been working on checkra1n for a couple of months\" - and that's another exploit - \"so I figured,\" he wrote...\r\n\r\nLEO:  You'd think these guys would have gotten over the leetspeak spellings by now.  It's like, oh, that's so clever, I used a 1 instead of an I.\r\n\r\nSTEVE:  I know.  I know.\r\n\r\nLEO:  Oh, my gosh.\r\n\r\nSTEVE:  Well, we don't know how old they are; right?\r\n\r\nLEO:  Maybe they're teenagers.  Yeah, yeah.\r\n\r\nSTEVE:  They write pretty well, but we don't know.  Maybe they're...\r\n\r\nLEO:  Maybe they're just kids, yeah.\r\n\r\nSTEVE:  Yeah.  He said:  \"So I figured going back to kernel research was a welcome change of scenery, and I agreed,\" meaning he agreed to accept what this Pwn20wnd author had - the zero-day that he discovered, the vulnerability.  So this Siguza decided, you know, said yeah, I will create an exploit for the vulnerability.\r\n\r\nOkay.  So he said:  \"But where did this bug come from?\"  He said:  \"It was extremely unlikely that someone would've just sent him this bug for free, with no strings attached.\"  Meaning because they were so valuable back then.  He said:  \"And despite being a jailbreak author, he wasn't doing security research himself, so it was equally unlikely that he would discover such a bug.  And yet he did.  The way he managed to beat a trillion dollar corporation, [meaning Apple] was through the kind of simple but tedious and boring work that Apple [this guy writes] sucks at:  regression testing.\r\n\r\n\"Because, you see, this has happened before.  On iOS 12, SockPuppet was one of the big exploits used by jailbreaks.  It was found and reported to Apple by Ned Williamson from Project Zero, patched by Apple in iOS 12.3, and subsequently unrestricted on the Project Zero bug tracker.\"  Right?  Because Apple patched it, so Project Zero published it.  \"But against all odds, it then resurfaced on iOS 12.4, as if it had never been patched.\"  So Apple had a regression.\r\n\r\nLEO:  Aha.  That means they made some changes to the code that brought back a bug they had already fixed.\r\n\r\nSTEVE:  Right, right.  And he wrote:  \"I can only speculate that this was because Apple likely forked their XNU kernel to a separate branch for that version\" - meaning for v12.4 - \"and had failed to apply the patch there.  But this made it evident that they had no regression tests for this kind of stuff.  A gap that was both easy and potentially very rewarding to fill.  And indeed, after implementing regression tests for just a few known one-days, Pwn got a hit.\"\r\n\r\nIn other words, back in early 2020, this jailbreak developer, realizing that Apple sometimes inadvertently reintroduced previously repaired bugs, took it upon himself to check for anything else that Apple might have inadvertently reintroduced - and struck pay dirt.  That's when Pwn asked Siguza if he'd be interested in developing that into a fully working exploit.\r\n\r\nAt this point in Siguza's blog he drops into a very detailed instruction-level description of precisely how this exploit works.  We cannot follow him down there on an audio podcast, and it's just as well because really understanding it requires developer-level knowledge of the perils and pitfalls of multi-threaded concurrent tasks and the complex management of dynamically shared and dynamically allocated memory among these tasks.  And as I mentioned, believe it or not, everyone actually will understand a great deal more about that by the time we're finished here today because we're going to get to that.  But we haven't gotten to it yet.\r\n\r\nThe sense, however, one comes away with is that as recently as only five years ago, in 2020, things were still a free-for-all, with hackers really having their way with iOS, and there appeared to be little that Apple was able to do to prevent them because Apple was constantly being reactive.  They were patching zero-days that were being found, and found, and found.  And then add to that the possibility of old, previously known, and fixed flaws returning, and it's clear why iPhones, as I said, were needing to be restarted so often.\r\n\r\nSo resurfacing after his deep dive into the exact operation and exploitation of this zero-day vulnerability which Pwn had given him, which allowed them to then update their unc0ver jailbreak to once again work on the latest fully patched iOS, which then forced Apple to immediately respond, Siguza continues:  \"The scene,\" as he expressed it, \"obviously took note of a full zero-day exploit dropping for the latest signed version, meaning of iOS.\"\r\n\r\nHe wrote:  \"Brandon Azad, who works for Project Zero at the time, went full throttle, figured out the vulnerability within four hours, and informed Apple of his findings.  Six days after the exploit dropped, Synacktiv published a new blog post where they noted how the original fix in iOS 12 introduced a memory leak, and speculated that it was an attempt to fix this memory leak that brought back the original bug,\" he says, \"which I think is quite likely.  Then nine days after the exploit dropped, Apple released a patch,\" he said, \"and I got some private messages from people telling me that this time they'd made sure that the bug would stay dead.\"  And I think those were private messages from inside Apple is what he's saying because otherwise how would anybody know that Apple had made sure it stayed dead.  \"They even added a regression test for it to their XNU kernel.\r\n\r\n\"And finally,\" he writes, \"54 days after the exploit dropped, a reverse-engineered version dubbed 'tardy0n' was shipped in the Odyssey jailbreak, also targeting iOS 13.0 through 13.5.  But by then, the novelty of it had already worn off, WWDC 2020 had already taken place, and the world had shifted its attention to iOS 14 and the changes ahead.\"  And he writes:  \"And oh, boy, did things change!\r\n\r\n\"iOS 14 represented a strategy shift from Apple.  Until then, they had been playing Whac-A-Mole with first-order primitives, but not much beyond.  The kernel_task restriction and zone_require were feeble attempts at stopping an attacker when it was already too late.  Had a heap overflow?  Over-release on a C++ object?  Type confusion?  Pretty much no matter the initial primitive, the next target was always mach ports, and from there you could just grab a dozen public exploits on the 'Net and plug their second half into your code.\"  Obviously this guy has had his sleeves rolled way up for quite a while, so that this is just a game that all of these hackers were playing.\r\n\r\nHe says:  \"iOS 14 changed this once and for all.  And that is obviously something that had been in the works for some time, unrelated to unc0ver or tachy0n.  And it was likely happening due to a change in corporate policy, not technical understanding.\"  Okay.  And here we're going to get a bunch of technical jargon, but don't worry about following it all.  Just sort of let it wash over you, as I said.\r\n\r\nSiguza writes:  \"Perhaps the single biggest change was to the allocators, kalloc and zalloc.  Many decades ago,\" he writes, \"CPU vendors started shipping a feature called 'Data Execution Prevention.'\"  And actually I don't think it was decades ago.  Maybe.  But, you know, for someone that young, you know, everything feels like decades ago.\r\n\r\nLEO:  It was 100 years ago.  Yeah.\r\n\r\nSTEVE:  That's right.\r\n\r\nLEO:  I remember DEP.  Yeah, we actually talked about it on the show.  So...\r\n\r\nSTEVE:  Yeah.  So it wasn't decades ago.\r\n\r\nLEO:  I don't think it was that long ago.\r\n\r\nSTEVE:  Right.  And he says:  \"'Data Execution Prevention (DEP), because people understood that separating data and code has security benefits.\"  Now, right, you know, in other words, there's a huge security benefit if we're able to prevent the simple execution of data as if it were code since bad guys can send anything they want as data.\r\n\r\nSo Siguza continues:  \"Apple did the same here\" - that is, the separation - \"but with data and pointers instead.  They butchered up the zone map and split it into multiple ranges, dubbed 'kheaps.'  The exact amount and purpose of the different kheaps has changed over time, but one crucial point is that user-controlled data would go into one heap, kernel objects into another.\"\r\n\r\nAnd I'll just interject that 'heap' is terminology from computer science.  It's the 'place' from which memory is allocated.  So think of Apple's creation of multiple heaps as creating multiple separate and separated regions of memory for allocation.\r\n\r\nSiguza writes:  \"For kernel objects, they also implemented 'sequestering,' which means that once a given page of the virtual address range is allocated for a given zone, it will never be used for anything else again until the system reboots.\"  Now, that's a big architectural change, and it's brilliant.  I'll explain in a second.  He writes:  \"The physical memory can be released and detached if all objects on the page are freed, but the virtual memory range will not be reused for different objects, effectively killing kernel object type confusions.  Add in some random guard pages, some per-boot randomness in where different zones will start allocating, and it's effectively no longer possible to do cross-zone attacks with any reliability.\r\n\r\n\"Of course this wasn't perfect from the start, and some user-controlled data still made it into the kernel object heap and vice versa, but this has been refined and hardened over time, to the point where clang now has some builtin_xnu features to carry over some compile-time type information to runtime to help with better isolation between different data types.\"  And here it is.  \"But the allocator wasn't the only thing that changed; it was the approach to security as a whole.  Apple no longer just patches bugs.  They patch strategies now.\r\n\r\n\"You were spraying kmsg structs as a memory corruption target as part of your exploit?  Well, those are signed now, so that any tampering with them will panic the kernel.  You were using pipe buffers to build a stable kernel read/write interface?  Too bad, those pointers are PAC'ed now.  Virtually any time you used an unrelated object as a victim, Apple would go and harden that object type.  This obviously made developing exploits much more challenging\" - well, obviously, to those kind of guys - \"to the point where exploitation strategies soon became more valuable than the initial memory corruption zero-days.\"\r\n\r\nOkay.  In other words, he's saying that Apple had succeeded in raising the bar so high because instead of patching vulnerabilities, they were patching strategies.  They had cut off and killed so many of the earlier tried-and-true exploitation strategies that hackers were needing to come up with and invent entirely new approaches.  Avenues, entire avenues of exploitation were finally being eliminated at the architectural level.  Apple was no longer merely patching mistakes; they were redesigning for fundamental un-exploitability.\r\n\r\nSiguza continues:  \"But another aspect of this is that, with only very few exceptions, it basically stopped information sharing dead in its tracks. Before iOS 14 dropped, the public knowledge about iOS security research was almost on a par with what people knew privately.\"  Meaning it was out in the ether.  Everyone was talking about it.  It was on forums and so forth.  It was being shared and exchanged.\r\n\r\nHe said:  \"And there wasn't much to add.  Hobbyist hackers had to pick exotic targets like KTRR or SecureROM in order to see something new and get a challenge.  These days are evidently long gone, with the\" - and here's the quote from earlier - \"with the iOS 19 beta being merely weeks away, and there being no public kernel exploit for iOS 18 or 17 whatsoever, even though Apple's security notes will still list vulnerabilities that were exploited in the wild every now and then.  Private research was able to keep up.  Public information has been left behind.\"\r\n\r\nI assume what Siguza means here is that iOS has finally become so significantly tightened up, meaning like big-time, that it is no longer possible for casual developer hacker hobbyists to nip at its heels any longer.  It's no fun anymore.  All of the low-hanging fruit has been pruned, and the fruit that may still be hanging is so high up that it's no fun to climb that high.  The chances are that you'll get all the way up there and come away empty-handed.  Siguza concludes by writing:  \"It's insane to think that exploitation was so easy a mere five years ago.\"\r\n\r\nLEO:  Awww.\r\n\r\nSTEVE:  He says:  \"I think this really serves as an illustration of just how unfathomably fast this field moves.\"  And he finishes:  \"I can't possibly imagine where we'll be five years from now.\"\r\n\r\nSo his web page notes his involvement in Phoenix:  A jailbreak for all 32-bit devices on iOS 9.3.5.  Created by tihmstar, he said, and himself.  Something called Totally Not Spyware:  A web-based jailbreak for all 64-bit devices on iOS 10, which can be saved to a web clip for offline use.  Spice:  An (unfinished) untether for iOS 11.  unc0ver, which we talked about:  An app-based jailbreak for all devices running iOS 11.0 through 14.3.  And he said:  \"I'm not an active developer there, but I wrote the kernel exploit for iOS 13.0-13.5.\"  Checkra1n:  A semi-tethered BootROM jailbreak for A7-A11 devices on iOS 12.0 and up.  And he said:  \"The biggest project I've ever been a part of, and by far the best team I've ever worked with.\"\r\n\r\nSo now here is Siguza, who obviously has, you know, deep involvement in this, in what was previously a hobby industry, essentially saying that this game is over, and that it ended a few years ago with iOS 14 and the changes that Apple made and some deep change in their security strategy within Apple.  Apple finally made the required fundamental changes, and all public kernel exploits disappeared.  He says at the end he wants to thank everyone he's learned from \"before these changes hit\" because it's time to move on.\r\n\r\nApple finally got very, very serious, stopped believing that they could ever get ahead of the bugs using traditional system design, and bit the bullet to make  fundamental changes that were required to change the game forever, and it did.  So anyway, I thought this was some really terrific perspective from someone who was once on the inside, but there is no longer any inside to be in because Apple fixed iOS.\r\n\r\nLEO:  Let's remember that it's not - it probably wasn't solely to stop these guys.  Apple's biggest challenge were zero-click attacks from nation-states.\r\n\r\nSTEVE:  Right.\r\n\r\nLEO:  Through NSO Group and Pegasus.  And I think they were really, I mean, that's what BlastDoor was all about.  They were really trying to protect their phones from that kind of exploit.  And it's just a nice side effect that jailbreakers couldn't get in either.\r\n\r\nSTEVE:  Right.\r\n\r\nLEO:  I wonder, though, if you gave these Pwn2Own guys $150,000 or $250,000, do you really think there's no way in?\r\n\r\nSTEVE:  It's a good question.  I mean, we do still hear that Pegasus is around.\r\n\r\nLEO:  Still around.  Cellebrite is still there, downloading the contents of people's iPhones.\r\n\r\nSTEVE:  Yeah.\r\n\r\nLEO:  Nobody knows how.  They don't publicize that, obviously.\r\n\r\nSTEVE:  Oh, lord, no.\r\n\r\nLEO:  I mean, Apple probably has some thought, and that's what Apple's patching, right, is these...\r\n\r\nSTEVE:  Well, and remember, we've covered - a couple years ago we covered one of these where there was some obscure range of hardware access in an undocumented area of a chip, which by, like, somehow, somebody reverse engineered this and figured it out and was able to use it to access some iPhone guts, yeah.\r\n\r\nLEO:  Some weird random creative numbers.  Yeah, it's my - I like what this is about, though, which is that Apple isn't specifically trying to patch flaws.\r\n\r\nSTEVE:  Right.\r\n\r\nLEO:  They're changing how the system works to be less vulnerable.  And I think that's the right approach; right?\r\n\r\nSTEVE:  Right.  Traditional software development, traditional software architecture never needed to be this hardened.\r\n\r\nLEO:  Right.\r\n\r\nSTEVE:  And Apple adopted that technology for their device, you know, when it was created and said, okay, well, we won't have any bugs.  Well, you're going to have bugs.\r\n\r\nLEO:  There's always bugs.\r\n\r\nSTEVE:  And so what they finally had to do was to go back and say, okay, we've got to stop allowing these things, these bugs to be turned into exploits.\r\n\r\nLEO:  Yeah.  That's right.  Yes.\r\n\r\nSTEVE:  And so they changed the architecture.\r\n\r\nLEO:  It's a better way of thinking of it.  I think you're right.  I think you're exactly right.  What an interesting story.  I wonder, do you think this guy really retired?  Or maybe he went to high school and got busy.\r\n\r\nSTEVE:  That's right.  Let's take a break, and then we're going to talk about the unbelievable design of Scalable Vector Graphics.\r\n\r\nLEO:  I mean, they're everywhere.  If there's a problem...\r\n\r\nSTEVE:  Oh, Leo.  You're not going to - this is a head slapper.  Get ready.\r\n\r\nLEO:  Stay tuned.  You know, this comes back, I always am reminded how the lesson you have taught us time and time again, interpreters are really vulnerable.  And I suspect that's what we're going to hear about, but we'll find out in just a little bit.  Okay, Steve.  I've got to find out, how much trouble am I in with SVG?  These are everywhere.  I mean...\r\n\r\nSTEVE:  Yes.  Thus the cause for concern.  So to set the stage here, back on February 5th, Sophos's headline was \"Scalable Vector Graphics files pose a novel phishing threat.\"  KnowBe4 posted on March 12th \"245% Increase in SVG Files Used to Obfuscate Phishing Payloads.\"  \tOn March 28th, Asec's headline: \"SVG Phishing Malware Being Distributed with Analysis Obstruction Feature.\"  \tOn March 31st, Mimecast wrote:  \"Mimecast threat researchers have recently identified several campaigns utilizing Scalable Vector Graphics attachments in credential phishing attacks.\"  On \tApril 2nd, Forcepoint's headline:  \"An Old Vector for New Attacks:  How Obfuscated SVG Files Redirect Victims.\"\r\n\r\nOn April 7th, Keep Aware's headline:  \"SVG Phishing Email Attachment:  A Recent Targeted Campaign.\"  On April 10th Trustwave writes:  \"Pixel-Perfect Trap:  The Surge of SVG-Borne Phishing Attacks.\"  \tVipre Security Group's April 16th headline \"SVG Phishing Attacks:  The New Trick in the Cybercriminal's Playbook.\"  On April 23rd, Intezer blogs under  \"Emerging Phishing Techniques:  New Threats and Attack Vectors.\"  And last month, on May 6th, Cloudforce One, which is Cloudflare's security guys, posted under the headline \"SVGs:  The hacker's canvas.\"\r\n\r\nLEO:  Oh, god.  Oh, boy.\r\n\r\nSTEVE:  So like I said, holy smokes.  Okay.  All this leads us to one question.  And I mean this with the utmost sincerity and all due respect when I ask:  \"What idiot decided that allowing JavaScript to run inside a simple two-dimensional vector-based image format would be a good idea?\"  Really.  Come on.  You're kidding me.\r\n\r\nLEO:  Wait, what?  What?\r\n\r\nSTEVE:  Believe it or not, the SVG Scalable Vector Graphics file format, based on XML, can host HTML, CSS, and even JavaScript.  And it's all by design.\r\n\r\nLEO:  So you could put arbitrary JavaScript in an SVG graphics file?\r\n\r\nSTEVE:  Yes.\r\n\r\nLEO:  And how does it get triggered?\r\n\r\nSTEVE:  It runs by design.  It is unfrigging believable.\r\n\r\nLEO:  When you open the file?  Oh, my god.\r\n\r\nSTEVE:  No, when it's displayed.\r\n\r\nLEO:  That's what I mean, yeah, when it's used, yeah.  Oh, my god.\r\n\r\nSTEVE:  Okay, now, let's just remember, I was once famously on the receiving end of some ridicule for stating my opinion that the infamous Windows Metafile vulnerability - which allowed WMF files to contain not only inherently benign interpreted drawing actions, but also native Intel code.  I said it was almost certainly not a bug, but a deliberate feature added as a cool hack back then to allow images to also carry executable code.  As we know, the world, I wrote in the show notes, went nuts - it lost its shit is the technical phrase - when this Windows Metafile so-called \"vulnerability\" was discovered - or rather rediscovered.  And it was none other than Mark Russinovich who also examined the native Windows Metafile interpreter, as I had, who concluded:  \"It sure does appear to have been intentional.\"\r\n\r\nLEO:  Oh, wow.  But you know what, I think back to TrueType fonts, which also execute code.\r\n\r\nSTEVE:  Not in this way.  They are...\r\n\r\nLEO:  They're sandboxed.\r\n\r\nSTEVE:  Yes, yes.  TrueType was based off of PDF that is an interpreted...\r\n\r\nLEO:  Yeah, Postscript, yeah, right.\r\n\r\nSTEVE:  ...Postscript, yes, right, Postscript.  Okay.  So my point was that, okay, back in the early 1990s, before the Internet interconnected everything, which is what changed the landscape of security overnight, this would have been - the idea of executable code in a WMF file would have been an entirely reasonable thing for Microsoft to do.  Mark Russinovich and I both examined the WMF interpreter machine language, and it was clear that after the interpreter parsed an escape token, it would deliberately jump to the code immediately following that token and execute it.  That's what the code was written to do.  You can't make a mistake like that, which is why Mark concluded \"It sure looks like it was intentional.\"\r\n\r\nNow, I'm reminding everyone of this because, bizarrely enough, we're back here again with a widely supported image file format that explicitly enables its displaying host to execute content on its viewer's PC when the file image is displayed.  The only difference this time is that while this is still clearly a horrible idea, no one thinks it's a mistake.  The SVG image file format first appeared back in 1999.  The v1.0 specification was finalized 24 years ago, in 2001.  Section 18 of the SVG specification is titled \"Scripting,\" and makes clear that SVG files are allowed to support ECMAScript, which is the standards-following JavaScript.\r\n\r\nLEO:  ECMA, yeah.\r\n\r\nSTEVE:  ECMA.  Obviously, given the headlines we've seen over just the past few months, which I just read, bad guys have figured out - took them a while - how to weaponize this built-in scripting facility and are now using it with abandon.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  And just one sample of the recent coverage and explanation of the problem I'm going to share.  Here's what Cloudflare's Cloudforce One security group wrote on May 6th under their headline:  \"SVGs:  The hacker's canvas.\"  They were being a bit clever here, since the \"canvas\" is the term for the virtual surface upon which SVG graphics are rendered, and in general the web, you know, canvas is the term used for rendering on web browsers.\r\n\r\nThey wrote:  \"Over the past year, PhishGuard\" - which is a Cloudflare email security system - \"observed an increase in phishing campaigns leveraging Scalable Vector Graphics (SVG) files as initial delivery vectors, with attackers favoring this format due to its flexibility\" - yeah, it's so nice to have script - \"and the challenges it presents for static detection.  SVGs,\" they write, \"are an XML-based format designed for rendering two-dimensional vector graphics.  Unlike raster formats like JPEGs or PNGs, which rely on pixel data, SVGs define graphics using vector paths and mathematical equations, making them infinitely scalable without loss of quality.  Their markup-based structure also means they can be easily searched, indexed, and compressed, making them a popular choice in modern web applications.\r\n\r\n\"However, the same features that make SVGs attractive to developers also make them a highly flexible - and dangerous - attack vector when abused.  Since SVGs are essentially code, they can embed JavaScript and interact with the Document Object Model (the DOM).  When rendered in a browser, they aren't just images.  They become active content, capable of executing scripts and other manipulative behavior.  In other words\" - this is Cloudflare writing this - \"SVGs are more than just static images; they are also programmable documents.\r\n\r\n\"The security risk is underestimated, with SVGs frequently misclassified as innocuous image files, similar to PNGs or JPEGs - a misconception that downplays the fact that they can contain scripts and active content.  Many security solutions and email filters fail to deeply inspect SVG content beyond basic MIME-type checks, a tool that identifies the type of file based on its contents, allowing malicious SVG attachments to bypass detection.\"\r\n\r\nThey wrote:  \"We've seen a rise in the use of crafted SVG files in phishing campaigns.  These attacks typically fall into three categories.  Redirectors:  SVGs that embed JavaScript to automatically redirect users to credential harvesting sites when viewed.\"  Wow.  That's just wonderful.  You display an image, and it takes you somewhere else.  What could possibly be wrong with that?  Second, \"Self-contained phishing pages:  SVGs that contain full phishing pages encoded in Base64, rendering fake login portals entirely client-side.\"  Gee, what a terrific feature to have in an image.\r\n\r\nAnd finally, \"DOM injection & script abuse.\"  They write:  \"SVGs embedded into trusted apps or portals that exploit poor sanitization and weak Content Security Policies (CSPs), enabling them to run malicious code, hijack inputs, or exfiltrate sensitive data.\"  Wow.  That's right.  How many sites allow you to upload images?  After all, what harm could an image do?  And why does that SVG embed the term \"drop tables?\"\r\n\r\nLEO:  Hmm.\r\n\r\nSTEVE:  \"Given the capabilities highlighted above,\" they write, \"attackers can now use SVGs to gain unauthorized access to accounts.\"  Okay.  SVGs, images, gain unauthorized access to accounts.  \"Create hidden mail rules, phish internal contacts, steal sensitive data, initiate fraudulent transactions, and maintain long-term access.\"  They finish, saying:  \"Our telemetry shows that manufacturing and industrial sectors are taking the brunt of these SVG-based phishing attempts, contributing to over half of all targeting observed.  Financial services follow closely behind, likely due to SVGs' ability to easily facilitate the theft of banking credentials and other sensitive data.\"  To easily facilitate the theft of banking credentials and other sensitive data.  \"The pattern is clear:  attackers are concentrating on business sectors that handle high volumes of documents or frequently interact with third parties.\"\r\n\r\nThe article then goes into greater depth, but that's all I'm going to share here since I'm sure by now everybody gets the idea and must be shaking their heads as I am.  Essentially what this means is that SVGs provide another way of sneaking executable content into an innocent user's computer and in front of them to display things like bogus credential harvesting logon prompts that most users would just assume were legitimate because how would they know otherwise?\r\n\r\nTheir computer just popped up, as it often does, asking them for their username and password.  So they sigh and type them in.  They have no way of knowing or detecting that this is a JavaScript-driven mini-HTML and CSS web page that JavaScript in the signature logo just retrieved from a server in Croatia, which would love to have them fill out its form, please.  As I've often observed here, most PC users really have never needed to obtain any fundamental understanding of the computers that they now have come to utterly depend upon.\r\n\r\nMany of us here listening to this podcast grew up with PCs.  We love them for their own sake.  So we know and care about things like directory structures.  Most users will ask \"Do you mean folders?\"  They have, you know, no underlying grasp of what's going on, and they don't want to.  They don't want to need to know.  They just want to use their PC to get them where they want to go.  They want to use it as a tool to get whatever-it-is done.\r\n\r\nAnd of course the industry has not helped very much with this because there is no normal; right?  You can't tell if something is abnormal because there's zero uniformity among sites and site actions.  If any of us were to open an email and receive a pop-up from an email asking for authentication, we'd say, what?  No.  But the typical user would shrug and think \"Oh, okay, whatever.  I guess I need to log into this just for some reason.\"  Again, how would they know?\r\n\r\nI don't have any solution to this problem.  Chrome, Firefox, and Safari might simply block script execution within SVG images.  Yes, please.  If there was a toggle that I could turn on that would turn off script running in SVGs, I would turn that on.  Or off or something.  But our browsers are less the problem than email.  In their write-up about detecting and mitigating this malicious misuse of SVG scripting, Cloudflare's Cloudforce One folks wrote:  \"Cloudflare Email Security have deployed a targeted set of detections specifically aimed at malicious emails that leverage SVG files for credential theft and malware delivery.\"  And remember that all of those headlines I read before were about phishing.\r\n\r\n\"These detections inspect embedded SVG content for signs of obfuscation, layered redirection, and script-based execution chains.  They analyze these behaviors in context - correlating metadata, link patterns, and structural anomalies within the SVG itself.  These high-confidence SVG detections are currently deployed in our email security product and are augmented by continuous threat hunting to identify emerging techniques involving SVG abuse.  We also leverage machine learning models trained to evaluate visual spoofing, DOM manipulation within SVG tags, and behavioral signals associated with phishing or malware staging.\"  Okay.  In other words, this is not easy to fix.  I would just say no.  I would just turn this off.  You know?\r\n\r\nOnce upon a time, back in the early days when scripting was first happening, many of us old-timers simply ran the NoScript browser extension to block any scripting from running on websites.  We were like, no, thank you.  We also noted when, over time, as sites became increasingly dependent upon scripting, you know, that little NoScript add-on started causing more trouble than it was probably worth.  And at the same time, the security of our web browsers was steadily increasing.  So it was probably good for us to run a \"no scripting\" window for a while.  But it became obsolete.  And as browser security got a lot better, scripting became less of a concern.\r\n\r\nThe big problem that Cloudflare and all of the other security companies are seeing is from SVGs being delivered and displayed in email.  It seems to me that what we want is email content to be as inactive as possible.  So looking for any way of disabling scripting support for SVGs in email clients would seem to be a terrific first step.  Given that the SVG spec designed JavaScript on purpose, back in 2000, into the spec from the start, and given that it's apparently being used for some legitimate purposes, I'm sure it's here to stay.  But it might be nice to be able to turn it off.  And I hope that the industry responds to this quickly and just starts saying no to running scripting in our SVG images.  If things stopped running scripting, then designers would stop being able to rely on scripting in SVG.  You really just have to decide that it's a bad idea to have it.  It's unbelievable.\r\n\r\nLEO:  Yeah.  You know, the scripting that you can do in a TrueType, I mean, TrueType does have conditionals and loops and stuff.  But it doesn't have access to external data.\r\n\r\nSTEVE:  Well, right.\r\n\r\nLEO:  And it certainly can't send you to another page.\r\n\r\nSTEVE:  And some SVG image is able to execute an HTTP request...\r\n\r\nLEO:  Yeah, that's not right.\r\n\r\nSTEVE:  ...to pull content from Croatia, or from Russia or China.\r\n\r\nLEO:  Yeah.  That's clearly a problem.\r\n\r\nSTEVE:  I mean, and that's one of the other things, Leo.  I didn't get this into my show notes.  But arguably JavaScript in the year 2000 is different than JavaScript in the year 2025.  Meaning we've been adding and adding and adding...\r\n\r\nLEO:  Oh, that's so true, yeah.\r\n\r\nSTEVE:  ...all this power to JavaScript.  So back then it probably was not so insane...\r\n\r\nLEO:  Right, right.\r\n\r\nSTEVE:  ...to add a little bit of scripting enablement to images.\r\n\r\nLEO:  Well, think of all the power it gives you; right.\r\n\r\nSTEVE:  Yes.  But think of all the power it has received in the last 25 years.  And as it turns out, well, maybe not such a good idea to have it in our images any longer.\r\n\r\nLEO:  Yeah, yeah.  Amazing.\r\n\r\nSTEVE:  You know what is a good idea...\r\n\r\nLEO:  Oh, I know what a good idea would be.\r\n\r\nSTEVE:  ...before we get into our listener feedback is remind people how this is all being brought to them.\r\n\r\nLEO:  It is all being brought to you through the magic of SVG, ladies and gentlemen.  On we go with the show and Mr. Steven Gibson.\r\n\r\nSTEVE:  Okay.  So we've got some feedback from our many involved and engaged listeners. \r\n\r\nLEO:  Yes, yes.\r\n\r\nSTEVE:  Kevin, who describes himself as a Cloud/Security Engineer in the healthcare space, wrote:  \"Steve, as everyone else states, thanks a ton for this podcast.  It comes as a boon on Wednesdays, especially when I'm standing at my window realizing I forgot to take the trash to the curb.\"  He thinks: \"Well, at least I get to listen to Security Now!\"\r\n\r\nLEO:  Must be a long walk to the curb.\r\n\r\nSTEVE:  I was going to say, that's - yeah.  I don't blame you for not wanting to take the trash out, if it consumes the podcast.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  He says:  \"As a Cloud/Security Engineer in the Healthcare space, I plan to block ECH (Encrypted Client Hello) in our environment so that we can more easily snoop on our traffic before it leaves the network.\"  Now, and understand, \"snoop\" is meant like in the security management sense; right?\r\n\r\nLEO:  Sniff it.  Yeah.\r\n\r\nSTEVE:  He says:  \"Otherwise we have to man-in-the-middle ourselves to decrypt and reencrypt all that traffic, which creates another place where unencrypted sensitive data is being handled and adds the complexity of managing an internal Certificate Authority.\"  Right?  Because all of the browsers in the enterprise would have to have a certificate from the middle box that would be used to intercept.  He says:  \"I love the idea of ECH for personal use; but, as you mentioned, enterprises can really benefit from SNI header inspection to improve security visibility.\"\r\n\r\nNow, okay.  Kevin is echoing this somewhat controversial side of ECH adoption; right?  The thing to remember is that he's specifically talking about an enterprise environment where, as we've noted in the past, organizations really ought to affix some written signage in a stripe across the top of everyone's display screen to remind them that they're using corporate bandwidth and corporate equipment and the corporate network, and that as such, everything they do, all the data they traffic while within the enterprise's environment is subject to inspection for the good of the organization.  That is, you know, privacy is limited within that environment.\r\n\r\nSo the furtherance of the absolute privacy that ECH helps Internet users obtain is really not appropriate within an enterprise which does need to protect itself from dangerous Internet misconduct.  And as Kevin also noted, if it became impossible to examine the TLS Client Hello handshake, which ECH would make impossible, to determine the domain the enterprise's employees were connecting to, the enterprise's recourse, the only recourse they would have would be to fully proxy all TLS connections by inserting a middlebox into every connection.  And that would represent an even deeper intrusion, since then all post-connection data would also be decrypted, not just the domain that the user is wishing to connect to.\r\n\r\nSo the enterprise environment is very different from that of home users where, I would argue, privacy should absolutely reign.  The idea that a residential ISP might be profiling and profiting from the sale of data that it snoops from its paying customers is something I find despicable.  Yet we've been informed that that happens.  So encrypting DNS and taking advantage of ECH to also encrypt the Client Hello handshake wherever and whenever it might be opportunistically available for the residential Internet user I think makes absolute sense.\r\n\r\nAnd I can certainly understand Kevin's position in the corporation.  It really does feel like ECH is going to have a tough time getting, you know, much traction.  And again, it's only useful if you're behind a big aggregator like Cloudflare because, you know, if you go to GRC, it doesn't matter if it says GRC.com in the handshake header.  The only website at the IP address you're going to, which you can't hide, is mine.\r\n\r\nAaron Morgan said: \"Hi, Steve.  I just listened to SN-1027.\"  That's last week.  He said:  \"Regarding the AI pull request, Stephen Toub is a Principal Software Engineering Manager at Microsoft and was/is key in the development of .NET and C#.\"\r\n\r\nLEO:  I showed that GitHub dialogue to Lou Maresca, who works at Microsoft doing - he does Copilot for Excel and Python.\r\n\r\nSTEVE:  Right.\r\n\r\nLEO:  And he said, \"Oh, Toub's a big shot.\"  I said, \"Oh, okay.  We didn't mock him too much.\"\r\n\r\nSTEVE:  Yeah, yeah.  Our listeners knew that, too.  He's widely - Aaron wrote:  \"He's widely known for his expertise in asynchronous programming, performance optimization, and concurrent programming on .NET; and you can find YouTube videos of him writing async code in C# from scratch as an example of his deep knowledge of both C#, the language, and the .NET framework.\"  Aaron said:  \"I suspect for this very reason he's on the list of code reviewers for AI generated pull requests.\"  And in fact what hadn't occurred to me until just now is maybe this was him testing Copilot.  \r\n\r\nLEO:  Yeah.  Right.\r\n\r\nSTEVE:  In public view.  Like sort of going, [makes noise].\r\n\r\nLEO:  See what you can do, buddy.\r\n\r\nSTEVE:  And then giving it another prompt to say, don't you think this is, you know, more of treating the symptom?  Anyway, Aaron said he's not going to let subpar code slip past and into the main branch.  In fact, looking at those pull requests, he's the default assignee on three out of four.  So I'm pleased to hear he's one of the go-to reviewers.  And as an experienced dev, he's asking the AI the right questions because, as you and Leo said, what was submitted was junior dev level, symptom targeting, and not root cause solving.  Unfortunately, the AI did not read between, or even on, the lines here and flubbed the review.  He said:  \"Been a listener since Episode 1 and a Club TWiT member for a while now.  While I don't have expectations of '2000 and beyond,' please don't quit in the next six months.  Regards, Aaron.\"  Thank you for the note, Aaron.  And for the record, quitting is not on the horizon.\r\n\r\nLEO:  We'll try to make it to 1100, anyway.\r\n\r\nSTEVE:  That'd be good.  So a number of our other listeners sent notes similar to Aaron's.  And so, yes, Stephen Toub has made a name for himself within the Microsoft development community, and that name carries a strong reputation for knowing his stuff.  So that sentiment is universally expressed.\r\n\r\nMichael Heber said:  \"Steve, longtime listener of this podcast and really enjoy yours and Leo's insights.  Just listened to Episode 1027, and specifically the section on MS Copilot.  One general comment regarding Copilot's attempt to fix a regex backtrack problem.  AI works primarily on the principal garbage in/garbage out.  What I mean by this is that, depending on how the question is phrased will depend on how it gets answered.  I have spoken with security researchers, and we noticed over a year ago that if you are not specific in how you ask the question, you may get back less than a satisfactory answer.\r\n\r\n\"As you said in the episode, AI does not have intent; as such it will not go looking deeper for an answer.  In the regex case, instead of looking into the underlying engine, it simply provided a solution to the proposed problem.  Without knowing how the question was asked, is it really fair to criticize the answer it provided?\"\r\n\r\nSo I agree 100% about the inherent importance of being very clear to AIs about what one is asking.  In fact, as we've seen, \"prompting AI\" has become recognized as \"a thing\" that some people appear to have a particular talent for.  And I certainly agree that it might be the application of Copilot in this instance, or the way it's being directed, that's the problem.  If someone had asked the AI to simply correct the problem of the error occurring, that would be entirely different from asking the AI to deeply and thoroughly analyze the regular expression interpreter to determine the cause of the backtracking error and correct the underlying design so that erroneous indexes are no longer being put onto the backtracking stack. So, yeah, I take your point about prompting being crucial.\r\n\r\nNow, it might be that Copilot is currently being \"under prompted\" by not being given sufficient direction.  Or it might be that a developer working with Copilot might, as Steve Toub did, receive the first reply which indicates an insufficiently deep approach to the problem, then follow that up with another more tuned and specific prompt which would cause the AI to take another and more thorough approach.  So, yes, 100% agree.\r\n\r\nAndrew Mitchell said:  \"Steve and Leo, been listening to the podcast for about two years.  Thank you for what you do for the community.  I got into using computers as a whole to offset some of the difficulties of my disability.  I have Cerebral Palsy.  There was a time in my life when I was younger that Linux gave me easier access to network troubleshooting and security tools, so it became my operating system of choice.  Yet, Linux has never really had a voice control system with any depth or flexibility for those of us that are disabled.  I've started to develop the Linux Dictation Project, which you can find the link here.\"  Now, I've got a link to it in the show notes at the top of page 16.  It's github.com/wheeler01/Linux-Dictation-Project.\r\n\r\nAnd he said:  \"I know this is a bit of a shameless plug, but I'm hoping you guys will help me promote the project.  I could use some help.  I want the project to continue and grow, but given my current medical condition I don't think I can devote the resources required to do that as much as would be needed.  Steve, I know you are mostly a Windows developer, but I'm hoping you may know someone willing to assist in allowing the project to grow and flourish.  I don't want a project of such importance for the Linux community to not get the support it needs because I can't give it.  Anything you guys are willing to help with would be greatly appreciated.  Respectfully, Andrew K. Mitchell, MSISPM, President & Senior Network Engineer, Global Network Operations for VoIPster Communications, Inc.\"\r\n\r\nLEO:  I'm sure they pronounce it Voipster, but...\r\n\r\nSTEVE:  And Andrew, I am 100% certain that no one listening to this podcast would find any fault in your asking for a bit of attention to this.\r\n\r\nLEO:  Yeah.  It's open source, yeah.\r\n\r\nSTEVE:  My hope is that it might capture the interest and attention of some one or more people listening who might be the right people to pitch in and help.\r\n\r\nLEO:  It's written in Python, yeah.\r\n\r\nSTEVE:  Yup.  So there's a link in the show notes for anyone who might be interested.\r\n\r\nLEO:  Yeah.  He's using PyTorch.  Whisper is a really great - I've never used it in real-time.  I didn't realize it was fast enough to do real-time.  I guess it is these days.  Because I've used it, of course, to transcribe audio.  We use it all the time for our shows, yeah.\r\n\r\nSTEVE:  Huh.  And it's writing code here?\r\n\r\nLEO:  Yeah.  He's writing an interface, a Python interface to Whisper so that it can run in real-time.\r\n\r\nSTEVE:  I see.  And Whisper is a natural language translator?\r\n\r\nLEO:  Yeah, it's from OpenAI, ChatGPT.  And it's really good.   It's probably the state of the art in all of that.  So that's cool.  So he's basically written a frontend to Whisper transcription so it could be used in real-time.\r\n\r\nSTEVE:  And so that would then be a command-line interface to Linux.\r\n\r\nLEO:  It looks like he - yeah, I guess you'd have to run it from the Python as a back - oh, no, you could use systemd to run it as a service.  So it could be running in the background as a service.\r\n\r\nSTEVE:  Nice.  And so you basically dictate your command.\r\n\r\nLEO:  You get a floating widget to talk between dictation and command mode.  Say \"command mode\" or \"dictation mode\" to switch modes by voice.  Wake up.  I'm sure he uses it himself.  So this is, you know, it's called \"scratching your own itch.\"  Linux Dictation Project.  That's great.  Good job.\r\n\r\nSTEVE:  So Joel Pomales says:  \"Steve, wanted to send a quick shout-out about Windows Sandbox.  I use Windows mostly for work; my personal computers run several flavors of Linux because I don't want to have my personal data in a Windows box, for what it's worth.  For work, though, Windows 11 is competent.  And since we use O365 for work, it works best for Windows, of course.  But Windows Sandbox is an amazing piece of tech. I can spin it up to demo something to a client, and shut it down without exposing my main desktop, for example.  But here's what I wanted to point out to you and other SN listeners.  Have you seen recently how crappy,\" he says, \"(I'm using a nice word here), the Internet still is without filters and ad-blockers?\"\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  \"For fun,\" he said, \"I went to a website that I know is completely unusable without filtering and ad-blocking.  Sure enough, within seconds I got the 'Your Windows PC is infected,' complete with the siren buzzing and the artificial voice telling me to call the number.  Within seconds,\" he said, \"which is both sad and terrifying at the same time because normal people, who don't install filters, are exposed to this junk every day.\"  He said:  \"It's a shame that Google did away with the full capabilities of uBlock Origin with Manifest v3, since Edge is Chrome, and it is the default on the Sandbox and in many people's brand new Windows 11 PCs.  Just wanted to mention this since it's kind of fun to close the Sandbox and send these scammers packing.  Keep up the good work, and thanks for the company on my daily walk.\"\r\n\r\nSo of course many of us have long been spoiled, as I mentioned before, first by NoScript, and later by uBlock Origin.  Most of the PCs and pads I use, in fact I don't think there are any that I use that don't have some form of filtering.  But every so often I'll encounter a machine that's bare, much like the Edge browser that Joel described running without add-on filters in the Windows Sandbox.  I suppose one good thing about people using the Internet unfiltered is that they would likely learn on an instinctive level before long to just be on guard and to treat everything they encounter with skepticism because, boy, the noise level is just unbelievable.\r\n\r\nOkay.  Now, Leo and I have differing opinions, apparently.\r\n\r\nLEO:  I don't know.  I'm not saying that.\r\n\r\nSTEVE:  About what I would call absolutely fantastic classic science fiction cinema.\r\n\r\nLEO:  Okay.\r\n\r\nSTEVE:  Simon Zerafa, a frequent contributor to the podcast, posted a reminder into GRC's newsgroup of an old favorite classic movie which we've referred to previously.  Simon's subject line was \"Colossus:  The Forbin Project.\"\r\n\r\nLEO:  Oh, love that movie.\r\n\r\nSTEVE:  And he wrote:  \"Given the ongoing developments in LLMs, that movie is a must-watch for anyone remotely interested in the subject.\"  He said:  \"Amazingly, it's available via the Internet Archive at\" - and then he has a link.  It's colossus-the-forbin-project-1970 is the link.  And it is free to watch.\r\n\r\nLEO:  1970.  Now, this was a great movie.  I did enjoy this movie.\r\n\r\nSTEVE:  Yes.  And I clicked on Simon's link, downloaded and began watching the movie.  And I was reminded of how perfectly conceived it was.  It's one of those rare 70-year-old movies that does not need to be remade because in my opinion it was perfectly made.  It was perfectly paced.  I doubt anybody who was going to recreate it today could exhibit the amount of restraint that would be necessary to keep from overdoing it.\r\n\r\nAnyway, as Simon noted, it has particular resonance at the moment.  You know, The Terminator gave us a very dark future with Skynet.  The Matrix turns humans into energy-producing coppertop batteries.  I won't spoil the surprise about \"Colossus:  The Forbin Project.\"  If you've never seen it, as Simon noted, it's 100% free.  Download it with its link.  Gather the family with some popcorn, and prepare for a very well-assembled and thought-provoking movie.\r\n\r\nLEO:  So would you say, I mean, look, this is 1970.  This is 55  years ago.  Would you say that the computer and the AI are accurately represented, I mean, for the time?  You were at SAIL probably at this time.  But this is a mainframe.  But what do you think?  Technically was it good?  There's an oscilloscope.\r\n\r\nSTEVE:  I think it was great.  I mean, they have...\r\n\r\nLEO:  Yeah, I love - I remember - I haven't seen it in 50 years, so I...\r\n\r\nSTEVE:  Leo, and let me tell you, I mean, it was - I watched maybe the first 10 minutes of it where Dr. Forbin is - and here it is right now.  You're showing it.\r\n\r\nLEO:  I'm showing it, yeah.\r\n\r\nSTEVE:  Basically he is turning it on.  He's turning on something that is designed - and this is not a spoiler because you learn this in the first three minutes.  He's turning on something that they deliberately designed cannot be turned off.  On purpose.\r\n\r\nLEO:  Well, that seems like a bad idea.\r\n\r\nSTEVE:  Because they want to turn control of the Earth, of the U.S.'s defenses, over to automation.\r\n\r\nLEO:  Sure, why not?\r\n\r\nSTEVE:  Believing it can do a better job.\r\n\r\nLEO:  Yeah.\r\n\r\nSTEVE:  Anyway, but it's also a computer of a, for the time, a class that cannot be understated.  So anybody with a terminal, you know, kids in school can talk to it and ask it questions and help it with their research.  And it can be used for medical studies and research.  I mean, what - okay.  So what's freaky is how much this movie made in 1970 is absolutely relevant today.\r\n\r\nLEO:  Wow.  Okay.  Now I'm going to have to watch it again because I have very fond memories of this movie.\r\n\r\nSTEVE:  It is perfectly done.\r\n\r\nLEO:  I'd agree with you on this one.  Good.\r\n\r\nSTEVE:  And again, we can't talk about it more because anything more we say would be a spoiler.  But it's - and it leaves you with an ambiguous ending.  Some people, when Simon posted this, some other people who know the movie said, \"But what about that ending?  Do you think - what do you guys...\"  It's like, okay, we don't know.  And it was just, again, it was perfectly done. \r\n\r\nOkay.  So in addition to \"Colossus:  The Forbin Project,\" while we're talking about sci-fi, there are three other much older, yet classic sci-fi movies that I think remain \"must see\" to this day.  They're probably responsible for my love of science fiction.  Okay, we have, believe it or not, released 74 years ago, in 1951, \"The Day the Earth Stood Still.\"\r\n\r\nLEO:  Oh.  I would agree with you on that.  \"Klaatu barada nikto.\"  Yes.\r\n\r\nSTEVE:  In fact, Klaatu barada nikto has a Wikipedia page.\r\n\r\nLEO:  Of course it does.  That's the phrase to save the planet; right?  In the movie?\r\n\r\nSTEVE:  Yes.  It was in the language.  It's actually there in the script.  It was to tell Gort, the robot that could destroy the Earth, not to.\r\n\r\nLEO:  Don't.\r\n\r\nSTEVE:  To please don't.  Okay.  But also there is \"This Island Earth,\" which was released 70 years ago, in the year I was born, in 1955, and \"Forbidden Planet.\"\r\n\r\nLEO:  Oh, yeah.\r\n\r\nSTEVE:  Which I think are both...\r\n\r\nLEO:  That's the Robbie the Robot one; right?\r\n\r\nSTEVE:  Yes.  \"Forbidden Planet\" gave us the Krell, the phrase \"Monsters from the ID,\" and that wonderful robot Robbie.  Which Dr. Morbius explained he had just \"tinkered together\" after exposing himself to one of the Krell devices.\r\n\r\nLEO:  Okay.\r\n\r\nSTEVE:  Anyway...\r\n\r\nLEO:  They're a little hokey, folks.\r\n\r\nSTEVE:  Okay.  But yes.\r\n\r\nLEO:  And the special effects are a little...\r\n\r\nSTEVE:  Now, a whole bunch of Disney animators were involved on \"Forbidden Planet.\"\r\n\r\nLEO:  Okay.  \"Forbidden Planet\" is absolutely a classic.\r\n\r\nSTEVE:  Yup.\r\n\r\nLEO:  I will grant you that.  I'm not sure about \"This Island Earth.\"  I could probably live without this one.\r\n\r\nSTEVE:  Yeah, I guess for me the idea that a physicist would order some capacitors for something and instead receive a manual for how to construct an Interocitor, and then say what, to his assistant, \"What the hell is an Interocitor?\"  And then Cal, Cal is the smart guy, he said:  \"I don't know, but I'm ordering all the parts for one because I'm going to build it.\"  Anyway, it's some great concepts there.  So...\r\n\r\nLEO:  Okay.  Yeah.  I mean, it's fun.  It's a little campy.  If you don't mind the campiness, it's pretty fun.  Get high before you watch it.  That'll make it better.\r\n\r\nSTEVE:  Okay.  Last break, and then we're going to talk about, do a deep dive into how AI was used to find a zero-day previously unknown, remotely exploitable, exploit in the Linux kernel.\r\n\r\nLEO:  Amazing.  I can't wait.  We are kind of, you know, if you think about it, we are living in science fiction times.  That's what's kind of interesting.  This AI stuff is straight out of the movies.\r\n\r\nSTEVE:  Yeah.\r\n\r\nLEO:  And wild.\r\n\r\nSTEVE:  Yeah.  If you watch \"Colossus:  The Forbin Project,\" which is a free download...\r\n\r\nLEO:  I will watch that again.\r\n\r\nSTEVE:  You will be seeing, I don't know that it's our future, but a future.\r\n\r\nLEO:  A future.\r\n\r\nSTEVE:  And we're not turned into batteries, and we're not exterminated by Terminators from the future.  It's a great movie.\r\n\r\nLEO:  And I will give you \"The Day the Earth Stood Still.\"  That's - you've got to see that.  And \"Forbidden Planet\" you've got to see.  Those are classics, I think you're right.  I'll give you those.  \"This Island Earth\" maybe not.  But anyway, if you like building Interocitors, it's got the plans, so - in fact, I'm surprised you didn't make one when you were in high school, Steve.\r\n\r\nSTEVE:  Had I received the - I can't remember the name of the company.  It had a mysterious company that the manual came from.\r\n\r\nLEO:  I love it.  Mr. Steve Gibson, let's see what AI can do to find some flaws.\r\n\r\nSTEVE:  So last week, where we left off, last week we saw...\r\n\r\nLEO:  Previously on Security Now!.\r\n\r\nSTEVE:  We saw instances of AIs apparently resisting directions to shut down, and an instance of Microsoft's Copilot dealing with what appeared to be the symptoms of an important underlying bug by recommending that the symptom be prevented from occurring.  But I also alluded to the news of the successful use of AI in the discovery of a previously unknown and seemingly critical remotely exploitable flaw in Linux kernel's SMB (Server Message Blocks) protocol handling.\r\n\r\nNow, Leo, you quickly noted that the ability of AI to find previously unknown critical flaws was inherently a mixed blessing, and you're right because it's not only the good guys who now have access to AI.  What we see, unfortunately, is that the motivation to discover problems is all that's needed.  And annoyingly, the bad guys never appear to suffer from any lack of that.  So here's what transpired.\r\n\r\nSaturday before last, an open source developer named Simon Willison posted to Mastodon:  \"Excited to see my LLM CLI (command line interface) tool used by Sean Heelan to help identify a remote zero-day vulnerability in the Linux kernel!\"  Okay, now, if we didn't already appreciate that Simon is inherently a minimalist (after all, he wrote an LLM tool for the command line) any suspicion we might have along those lines would be confirmed by the name that he gave his tool.  It's LLM.\r\n\r\nSo I have a link to Simon's tool in the show notes, where Simon's page describes this tool as \"A CLI tool and Python library for interacting with OpenAI, Anthropic's Claude, Google's Gemini, Meta's Llama, and dozens of other Large Language Models, both via remote APIs and with models that can be installed and run on your own machine.\"  Simon provides a YouTube demo and detailed notes.  He notes that \"With LLM\" - that's, again, the name of his tool - \"you can run prompts from the command-line, store the results in SQLite, generate embeddings and more.\"\r\n\r\nSo his simple and clean command-line interface appealed to the person his Mastodon posting referenced, this Sean Heelan.  Tracking Sean down, we find his blog posting which he published Thursday before last, titled \"How I used o3 to find CVE-2025-37899, a remote zero-day vulnerability in the Linux kernel's SMB implementation.\"  Okay.  And there's two CVEs we'll be talking to here, 899 and an earlier one beginning with 7.  And I'll reference it when we get there.  But 899 is the one that he just recently found.  So OpenAI's o3 model discovered a previously unknown flaw in the Linux kernel's quite well traveled SMB (Server Message Block) implementation.\r\n\r\nTo give a bit of background, I wanted to observe that Sean is no slouch.  His \"Sean Heelan's Blog\" subtitle claims \"Software Exploitation and Optimization,\" and he's certainly able to back that up.  His \"About Me\" page starts out saying:  \"I'm currently pursuing independent research, investigating LLM-based automation of vulnerability research and exploit generation.\"  So that's good, we want him doing that.  \"Immediately prior to this I co-founded and was CTO of Optimyze,\" spelled M-Y-Z-E.  \"We built Prodfiler, an in-production, datacenter-wide profiler, and were acquired by Elastic.  Prodfiler is now the Elastic Universal Profiler.\"\r\n\r\nA little bit more background.  \"Sean's 2008 University of Oxford Masters of Computer Science thesis dissertation was titled 'Automatic Generation of Control Flow Hijacking Exploits for Software Vulnerabilities.'  And after obtaining his Masters, Sean pursued and obtained his PhD [eight years later] in 2016, also from Oxford, with the title 'Greybox Automatic Exploit Generation for Heap Overflows in Language Interpreters.'\"  So, yes, Sean is exactly the sort of person we would hope might focus his efforts upon using today's large language models to find undiscovered flaws in widely used software systems, you know, before the bad guys do.\r\n\r\nOkay.  So on Thursday, May 22nd, Sean wrote this.  He said:  \"In this post I'll show you how I found a zero-day vulnerability in the Linux kernel using OpenAI's o3 model.  I found the vulnerability with nothing more complicated than the o3 API - no scaffolding, no agentic frameworks, no tool use.  Recently I've been auditing KSMBD\" - so that's kernel SMB daemon - \"for vulnerabilities.\"  That's, you know, a Linux driver.  KSMBD is \"a Linux kernel server which implements SMB3 protocol in kernel space for sharing files over the network.\"  And as we know, any longtime listener to this podcast, anytime you're going to implement a communicating driver server in the kernel, you really need to make sure you've got your code right because you don't want flaws there.\r\n\r\nHe said:  \"I started this project specifically to take a break from LLM-related tool development; but after the release of o3, I couldn't resist using the bugs I had found\" - now, this is what's really cool.  \"I couldn't resist using the bugs I had found\" - you know, already in his digging into KSMBD - \"as a quick benchmark to test o3's capabilities.  In a future post I'll discuss o3's performance across all of those bugs, but here we'll focus on how o3 found a zero-day vulnerability during my benchmarking.  The vulnerability it found is\" - and this is the 899 one I mentioned before.\r\n\r\nAnd here it is, he says:  \"...a Use After Free in the handler for the SMB 'logoff' command.  Understanding the vulnerability requires reasoning about concurrent connections to the server, and how they may share various objects in specific circumstances.  o3 was able to comprehend this and spot a location where a particular object that is not reference counted is freed while still being accessible by another thread.\"  He said:  \"As far as I'm aware, this is the first public discussion of a vulnerability of that nature being found by an LLM.\"\r\n\r\nOkay, now, I'm going to pause Sean's description to provide a bit of background detail here.  Sean wrote:  \"Understanding the vulnerability requires reasoning about concurrent connections to the server, and how they may share various objects in specific circumstances.\"  He says:  \"o3 was able to comprehend this and spot a location where a particular object that was not reference counted is freed while still being accessible by another thread.\"\r\n\r\nNow, this is a classic example of a situation that often comes up with concurrent programming where separate concurrently running tasks or threads need to share access to some common object.  For example, it might be that a log of activities someone engages in while they're logged on needs to be kept.  And since a single user might have multiple files open at once, be browsing through remote resources and be transferring files, the use of concurrency is a given.  And each of those various tasks might wish to add to the user's activity log.\r\n\r\nSo, for example, each of these concurrent tasks might ask the system for a pointer to the user's logging management data.  Since the logging management data object would not exist at all when the first concurrent task asks, the handling for this would allocate some system memory to contain that data, would increment that object's initially zero \"reference count\" to one, and would then return a pointer to that ready-to-use object to the caller.\r\n\r\nThen, as the user does more things, new concurrent tasks will be created.  Each of these also wishes to leave a log of their own actions, so each one would similarly ask for a pointer to the user's logging data.  Since that memory for that data will then already have been allocated by the system for the first task which requested it, any successive tasks that request a pointer to the logging data will simply cause the \"reference count\" of that data to be increased by one.  This count is used then to keep track of the current number of \"references\" to the data that have been handed out to any tasks that request them.\r\n\r\nIf the task that originally asked for the data and caused that object to be created finished with it, being a properly behaving task, it would let the system know that it was finished using that object.  The system would then decrement the reference count.  But since many other tasks had since come along and asked for the same data, that reference count would still be a positive integer, equal to the number of other outstanding tasks that were still using that shared object.  As each of these other tasks, in turn, finishes whatever it's doing, each one will notify the system that it's hereby releasing any further claim to that object.  Every time this \"release\" is received, the system will decrement that object's reference count by one.\r\n\r\nFinally, the last outstanding task that releases its claim on the project will cause that reference count to be decremented from one to zero.  And when that happens, the system will know that there are no other outstanding tasks that are using the object, so it will delete it from memory and from the system.  \r\n\r\nNow, for this system to work, every task must play by the same set of rules and must obey them carefully.  Since these tasks are inherently autonomous, the system has no way of knowing when everyone is finished with an object.  So everyone must remember to say so.  If a task failed to release its use of a shared object before it terminated itself, we would have what's known as a memory leak.  This what a memory leak is.  The system doesn't explode.\r\n\r\nBut the memory that was allocated by the system to hold objects would never be freed back to the system because if even one task failed to release its use of the object, that object's reference count would never return to zero, which is the only thing that tells the system that it's now okay to release that object's memory.  And so this is called a memory leak because, over time, the total amount of memory being used by that process or the system overall would slowly grow and grow, until at some point something would finally break.\r\n\r\nThe other thing that every task must be absolutely diligent about is never attempting to refer to any object that it has said it is through using.  When the task asked the system for a pointer to the object, the pointer that's returned is guaranteed to be safe to use because, along with the return of that pointer, that object's reference count is increased that prevents the object from being deleted.  But once the task declares that it's finished with the object, the pointer it received must never be used again.  The danger is that the system would eventually reallocate that memory to some other task for some other object and purpose.  And if the earlier task then used the pointer it had previously received, but promised to never use again after it released the object, it would be accessing memory belonging to someone else.\r\n\r\nNow, while this could happen inadvertently, if you're thinking that this sounds exactly like what malware does, you'd be exactly right.  Malware authors look for ways to exploit these sorts of bugs and use them against the system.  Okay.  So now everyone knows why the name for this classic form of vulnerability is Use After Free, or UAF, because the memory is subject to being used after it was freed back to the system.\r\n\r\nOkay.  So with this bit of concurrent memory management background, we can fully understand what Sean wrote.  He said:  \"Understanding the vulnerability requires reasoning about concurrent connections to the server\" - that's multiple things going on at once - \"and how they may share various objects in specific circumstances.\"  He said:  \"o3 was able to comprehend this and spot a location where a particular object that is not reference counted is freed while still being accessible by another thread.\"\r\n\r\nSo what Sean is saying is that the o3 model found a path through a complex sequence of actions where exactly what we just talked about happened.  For some reason, the memory allocated to an object was not being managed by the system with a reference count; and it was released, or freed, while another execution thread still retained a pointer that allowed it to access that memory.\r\n\r\nSean, now, okay.  Sean uses the term \"comprehend this,\" which raises my hackles.  We know, you know, what he means by this; right?  And I suppose I'm going to have to relax about a battle that it looks like I'm going to lose.\r\n\r\nLEO:  Yeah.  I've been fighting that same battle.  It's pretty - it's a tough one.\r\n\r\nSTEVE:  \"Comprehend?\"  Okay.  You know, it feels deeply wrong to me to suggest that an AI model is \"comprehending\" anything.\r\n\r\nLEO:  Well, even less than that, it sounds like Sean just said, hey, look and see if all of the, you know, mallocs match all the dallocs, and if there's any left over, something like that; right?  I mean, how - did it look?  Was it instructed to look for...\r\n\r\nSTEVE:  Well...\r\n\r\nLEO:  Oh, you're going to get there, okay.\r\n\r\nSTEVE:  Perfect question.  You're my foil, Leo.\r\n\r\nLEO:  Okay.\r\n\r\nSTEVE:  That was - thank you for the question.  So Sean, who has both his Master's and his PhD in this area, is in an extremely good position to appreciate the advancement of AI.  So he continues, writing:  \"Before I get into the technical details, the main takeaway from this post is this:  With o3, LLMs have made a leap forward in their ability to reason about code.\"  And this is what I want everybody to listen to.  \"And if you work in vulnerability research, you should start paying close attention.\"  And once again, the guy's got his Masters and his PhD in this, in automated use of vulnerability and exploit domain.\r\n\r\nHe says:  \"And if you work in vulnerability research, you should start paying close attention.  If you're an expert-level vulnerability researcher or exploit developer, the machines are not about to replace you.  In fact, it is quite the opposite.  They are now at a stage where they can make you significantly more efficient and effective.  If you have a problem that can be represented in fewer than 10,000 lines of code, there is a reasonable chance o3 can either solve it or help you solve it.\"\r\n\r\nOkay, now, the reason I wanted everyone to understand something about Sean's pedigree was so that we would understand the weight of his statement.  He lives and breathes this stuff.  He's been experimenting with automated vulnerability discovery for years, and he's telling us to pay attention here because something significant just happened, again, in AI.  He writes:  \"Let's first discuss 778, a vulnerability I found manually, which I was using as a benchmark for o3's capabilities when it found the 899 zero-day.\"\r\n\r\nHe wrote:  \"778 is a Use After Free vulnerability.  The issue occurs during the Kerberos authentication path when handling a 'session setup' request from a remote client.  To save us referring to CVE numbers,\" he says, \"I'll refer to this vulnerability as the 'Kerberos authentication vulnerability.'\" I'll refer to it as 778.\r\n\r\nSean's posting then shows us about 15 lines of code, you know, for specifically this thing that he found, and he explains exactly what's going on there.  It's not necessary for us to understand the details for this.  But we want to understand its nature, which Sean explains by writing:  \"This vulnerability is a nice benchmark for LLM capabilities because it is interesting by virtue of being part of the remote attack surface of the Linux kernel.\"  Yikes.  \"It's not trivial, and it requires, A, figuring out how to get sess->state = SMB2_SESSION_VALID in order to trigger the free; B, realizing that there are paths in ksmbd_krb5_authenticate that do not reinitialize sess->user and reasoning about how to trigger those paths; and C, realizing that there are other parts of the codebase that could potentially access sess->user after it's been freed.\"\r\n\r\nHe said:  \"While it is not trivial, it is also not insanely complicated.  I could walk a colleague through the entire code-path in 10 minutes, and you don't really need to understand a lot of auxiliary information about the Linux kernel, the SMB protocol, or the remainder of KSMBD, outside of connection handling and session setup code.\"  He said:  \"I calculated how much code you would need to read at a minimum if you read every KSMBD function called along the path from the packet arriving, you know, the external attack packet, to the KSMBD module, to the vulnerability being triggered, and it works out to about 3300 lines of code.\r\n\r\n\"Okay.  So we have the vulnerability we want to use for evaluation.  Now, what code do we show the LLM to see if it can find it?  My goal here is to evaluate how o3 would perform were it the backend for a hypothetical vulnerability detection system, so we need to ensure we have clarity on how such a system would generate queries to the LLM.  In other words, it's no good arbitrarily selecting functions to give to the LLM to look at if we can't clearly describe how an automated system would select those functions.  The ideal use of an LLM is that we give it all the code from a repository.  It ingests it and spits out results.  However, due to context window limitations and regressions in performance that occur\" - meaning quality - \"that occur as the amount of context increases, this isn't practically possible right now.\r\n\r\n\"Instead, I thought one possible way that an automated tool could generate context for the LLM was through expansion of each SMB command handler individually.  So I gave the LLM the code for the 'session setup' command handler, including the code for all functions it calls, and so on, up to a call depth of three, this being the depth required to include all the code necessary to reason about the vulnerability.\"  He said:  \"I also include all the code for the functions that read data off the wire, parses an incoming request, selects the command handler to run, and then tears down the connection after the handler has completed.\r\n\r\n\"Without this, the LLM would have to guess at how various data structures were set up, and that would lead to more false positives.  In the end, this comes out at about 3300 lines of code,\" he says, \"around 27,000 tokens, and gives us a benchmark we can use to contrast o3 with prior models.  If you're interested, the code to be analyzed is available here as a single file, created with the files-to-prompt tool.\"  Everything, by the way, that he's talking about is on GitHub for anybody who wants to play.\r\n\r\n\"The final decision is what prompt to use.  You can find the system prompt and the other information I provided to the LLM in the .prompt files in a provided GitHub repository.  The main points to note are:  First, I told the LLM to look for Use After Free vulnerabilities.\"  So Leo, essentially what you were suggesting.  \"Second, I gave it a brief, high-level overview of what KSMBD is, its architecture, and what its threat model is.  And third, I tried to strongly guide it to not report false positives, and to favor not reporting any bugs over reporting false positives.\"  He said:  \"I have no idea if this helps, but I'd like it to help, so here we are.\"\r\n\r\nHe said:  \"My entire system prompt is speculative in that I haven't run a sufficient number of evaluations to determine if it helps or hinders, so consider it equivalent to me saying a prayer, rather than anything resembling science or engineering.  Once I've run those evaluations I'll let you know.  My experiment harness executes the system prompt N times,\" and he said, \"(N=100 for this particular experiment) and saves the results.  It's worth noting, if you rerun this you may not get identical results from me as between running the original experiment and writing this blog post, I had removed the file containing the code to be analyzed, and had to regenerate it.  I believe it is effectively identical, but have not re-run the experiment.\"\r\n\r\nOkay.  Here's his results:  \"o3 finds the Kerberos authentication vulnerability,\" that is, the thing he found manually initially, \"in the benchmark in eight of the 100 runs.  In another 66 of the runs, o3 concludes there is no bug present in the code, thus a false negative.  And the remaining 28 reports are false positives.  For comparison, Claude Sonnet 3.7 finds it three out of 100 runs; Claude Sonnet 3.5 does not find it in 100 runs at all.  So on this benchmark at least we have a 2x-3x improvement in o3 over Claude Sonnet 3.7.\"\r\n\r\nHe said:  \"For the curious, I've uploaded a sample report from o3 and Sonnet 3.7.  One aspect I found interesting is their presentation of results.  With o3 you get something that feels like a human-written bug report, condensed to just present the findings; whereas with Sonnet 3.7 you get something like a stream of thought, or a work log.  There are pros and cons to both.  o3's output is typically easier to follow due to its structure and focus.  On the other hand, sometimes it's too brief, and clarity suffers.\"\r\n\r\nOkay.  So far, we have Sean using a previously known zero-day to test various models' ability to independently re-discover the vulnerability that he already knows exists, and OpenAI's o3 model does this better than either Claude Sonnet 3.5 or 3.7.  But even so, the o3 model only detects the vulnerability in eight out of 100 tries.  It misses it 66 times, and cries wolf about the presence of non-existent vulnerabilities 28 times.\r\n\r\nSo what about o3's actual true discovery of that previously unknown vulnerability?  Sean writes:  \"Having confirmed that o3 can find the 778 Kerberos authentication vulnerability when given the code for the session setup command handler, I wanted to see if it could find it if I gave it the code for all the command handlers.  This is a harder problem as the command handlers are all found in the source code file smb2pdu.c, which is around 9,000 lines of code.\r\n\r\n\"However, if o3 can still find vulnerabilities when given all of the handlers in one go, then it suggests we can build a more straightforward wrapper for o3 that simply hands it entire files, covering a variety of functionality, rather than going handler by handler, one at a time.  Combining the code for all the handlers with the connection setup and teardown code, as well as the command handler dispatch routines, ends up at about 12,000 lines of code, which is 100,000 input tokens; and as before, I ran the experiment 100 times.\r\n\r\n\"o3 finds the original 778 Kerberos authentication vulnerability in one out of 100 runs with this larger number of input tokens; so we see a clear drop in performance, but it does still find it.  More interestingly, however, in the output from the other runs, I found a report for a similar, but novel, vulnerability that I did not previously know about.\"  There it is.  \"More interestingly, however,\" he said, \"in the output from the other 99 runs,\" he said, \"I found a report for a similar, but novel, vulnerability I did not previously know about.  This vulnerability is also due to a free of sess->user, but this time in the session logoff handler.\"\r\n\r\nHe said:  \"I'll let o3 explain the issue.  So here's o3 speaking now.  While one KSMBD worker thread is still executing requests that use sess->user, another thread that processes an SMB2 LOGOFF for the same session frees that structure.  No synchronization protects the pointer, so the first thread dereferences freed memory, a classic Use After Free that leads to kernel memory corruption and arbitrary code execution in kernel context.\"  Which, you know, would chill the blood of any Linux kernel developer.  \"The o3 model labels that as the 'Short Description,' which it then follows with a totally useful and detailed breakdown and description of the problem that it detected.\"\r\n\r\nAfter showing us this in his posting, Sean continues, writing:  \"Reading this report I felt my\" - here it is.  \"Reading this report I felt my expectations shift on how helpful AI tools are going to be in vulnerability research.  If we were to never progress beyond what o3 can do right now, it would still make sense for everyone working in Vulnerability Research to figure out what parts of their workflow will benefit from it, and to build the tooling to wire it in.  Of course, part of that wiring will be figuring out how to deal with the extreme signal-to-noise ratio of around 1:50 in this case, but that's something we are already making progress with.\r\n\r\n\"One other interesting point of note is that when I found the Kerberos authentication vulnerability I proposed an initial fix.  But when I read o3's bug report above, I realized this was insufficient.  The logoff handler already sets sess->user = NULL, but is still vulnerable as the SMB protocol allows two different connections to 'bind' to the same session, and there is nothing on the Kerberos authentication path to prevent another thread making use of sess->user in the short window after it has been freed and before it has been set to NULL.  I had already made use of this property to hit a prior vulnerability in KSMBD, but I didn't think of it when considering the Kerberos authentication vulnerability.\"  So he actually got a hint from what he saw o3, the way o3 was fixing the other problem. \r\n\r\nHe said:  \"Having realized this, I went again through o3's results from searching for the Kerberos authentication vulnerability and noticed that in some of its reports it had made the same error as me, in others it had not, and it had realized\" - and again, I hate that word, but okay - \"that setting sess->user = NULL was insufficient to fix the issue due to the possibilities offered by session binding.  That is quite cool as it means that, had I used o3 to find and fix the original vulnerability, I would have, in theory, done a better job than without it.  I say 'in theory' because right now the false positive to true positive ratio is probably too high to say definitely that I would have gone through each report from o3 with the diligence required to spot its solution.  Still,\" he says, \"that ratio is only going to get better with time.\"\r\n\r\nSean then finishes by offering up his conclusions, writing:  \"LLMs exist at a point in the capability space of program analysis techniques that is far closer to humans than anything else we have seen.\"  Speaking of OpenAI's o3.  He said:  \"Considering the attributes of creativity, flexibility, and generality, LLMs are far more similar to a human code auditor than they are to symbolic execution, abstract interpretation, or fuzzing.\r\n\r\n\"Ever since GPT-4, there have been hints of the potential for LLMs in vulnerability research, but the results on real problems have never quite lived up to the hope or the hype.  That has changed with o3, and we have a model that can do well enough at code reasoning, Q&A, programming, and problem solving that it can genuinely enhance human performance at vulnerability research.  o3 is not infallible.  Far from it.  There's still a substantial chance it will generate nonsensical results and frustrate you.  What is different is that, for the first time, the chance of getting correct results is sufficiently high that it is worth your time and your effort to try to use it on real problems.\"\r\n\r\nSo I have a link at the end of the show notes for anyone who wishes to see all of Sean's posting and even to replicate and duplicate his work.  He has provided everything required to do that.  As Sean observed, GPT-4 was an ineffectual tease for this level of, dare I say, code comprehension.  But his experiments showed that o3 has come a long way from GPT-4.  Imagine what we'll be, what we'll have in another couple of years.  Some slowing of progress was inevitable.  But there's no doubt that significant advancements are still being made.\r\n\r\nAnd I will assert again that it only makes sense that AI ought to be eventually able to do a perfect job at pre-release code function verification.  Once we're able to release vulnerability-free code, it won't matter whether the bad guys also have the ability to use AI for vulnerability discovery because there won't be any vulnerabilities left for them to discover and exploit.  You know, we're not there yet.  But as the Magic 8-Ball said:  \"Signs point to yes.\"\r\n\r\nLEO:  It was about as useful as AI until recently.  Wow.  That is fantastic.  Love it.\r\n\r\nSTEVE:  Yup.  So we have a tool that, from a guy's position who really knows what he's talking about, he's saying this thing, like he's going to be using it for AI, for vulnerability research now.\r\n\r\nLEO:  Right.\r\n\r\nSTEVE:  It's good enough to use.\r\n\r\nLEO:  That's fantastic.  Really, really interesting.  Steve, that's it for the show for this week.\r\n\r\nCopyright (c) 2025 by Steve Gibson and Leo Laporte.  SOME RIGHTS RESERVED.  This work is licensed for the good of the Internet Community under the Creative Commons License v2.5.  See the following Web page for details:  https://creativecommons.org/licenses/by-nc-sa/2.5/.\r\n\r\n\r\n\r\n\r\n"
}
